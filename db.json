{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/person.jpg","path":"person.jpg","modified":1,"renderable":0},{"_id":"source/about/person.jpg","path":"about/person.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/analytics_google-analytics.js","path":"js/analytics_google-analytics.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/helpers.js","path":"js/helpers.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion_global.js","path":"js/motion_global.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/search-toggle.js","path":"js/search-toggle.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/bkdefault_avatar.jpg","path":"images/bkdefault_avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/README.md","path":"vendors/fancybox/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/CHANGELOG.md","path":"vendors/fancybox/CHANGELOG.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/1_s.jpg","path":"vendors/fancybox/demo/1_s.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/2_s.jpg","path":"vendors/fancybox/demo/2_s.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/2_b.jpg","path":"vendors/fancybox/demo/2_b.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/3_s.jpg","path":"vendors/fancybox/demo/3_s.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/4_s.jpg","path":"vendors/fancybox/demo/4_s.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/3_b.jpg","path":"vendors/fancybox/demo/3_b.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/ajax.txt","path":"vendors/fancybox/demo/ajax.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/5_s.jpg","path":"vendors/fancybox/demo/5_s.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/index.html","path":"vendors/fancybox/demo/index.html","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/iframe.html","path":"vendors/fancybox/demo/iframe.html","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/lib/jquery.mousewheel-3.0.6.pack.js","path":"vendors/fancybox/lib/jquery.mousewheel-3.0.6.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/5_b.jpg","path":"vendors/fancybox/demo/5_b.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/1_b.jpg","path":"vendors/fancybox/demo/1_b.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/4_b.jpg","path":"vendors/fancybox/demo/4_b.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/lib/jquery-1.9.0.min.js","path":"vendors/fancybox/lib/jquery-1.9.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/sprite.psd","path":"vendors/fancybox/sprite.psd","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/lib/jquery-1.10.1.min.js","path":"vendors/fancybox/lib/jquery-1.10.1.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Bold.eot","path":"fonts/lato/Lato-Bold.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-BoldItalic.eot","path":"fonts/lato/Lato-BoldItalic.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Italic.eot","path":"fonts/lato/Lato-Italic.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Regular.eot","path":"fonts/lato/Lato-Regular.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Regular.woff","path":"fonts/lato/Lato-Regular.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Bold.woff","path":"fonts/lato/Lato-Bold.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-BoldItalic.woff","path":"fonts/lato/Lato-BoldItalic.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Italic.woff","path":"fonts/lato/Lato-Italic.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Bold.ttf","path":"fonts/lato/Lato-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Italic.ttf","path":"fonts/lato/Lato-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Regular.ttf","path":"fonts/lato/Lato-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-BoldItalic.ttf","path":"fonts/lato/Lato-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"source/two.JPG","path":"two.JPG","modified":1,"renderable":0},{"_id":"source/about/two.JPG","path":"about/two.JPG","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e75c6f074c76b77e0f953ab8ed619acb4e2d2024","modified":1484103587000},{"_id":"source/CNAME","hash":"4d7851ef7a0d0ba790d03c1d21c674a0aac00707","modified":1463893448000},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1462434893000},{"_id":"themes/hexo-theme-next/.DS_Store","hash":"a421106fc7385918b34b5aaaaeb0ae78491cc1c5","modified":1463900476000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"44572c07a1254251638fb3fec8f4085f86be2f98","modified":1462434893000},{"_id":"themes/hexo-theme-next/README.md","hash":"f3c90a522126771af641b7e88167a732538310a1","modified":1462434893000},{"_id":"themes/hexo-theme-next/README.en.md","hash":"1771ed0b5e5dec42bd2c497d2c3e0861d464f030","modified":1462434893000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"fa9d6adafdbac93fc2c01def3751ba36d1bb632f","modified":1463961519000},{"_id":"themes/hexo-theme-next/bower.json","hash":"1a681eeb5bff68be34e4e5226678c6cd3a7a12cc","modified":1462434893000},{"_id":"source/about/index.md","hash":"95f39b004affb1aede1ac63b8ac9da0795593118","modified":1470125238000},{"_id":"source/about/.DS_Store","hash":"22cc4cb9caaae0b2378df173b3820ddc68e34cf3","modified":1463895567000},{"_id":"source/_posts/.DS_Store","hash":"86731a1bf4092238474947958e97453ebb149ec7","modified":1463893913000},{"_id":"source/_posts/Clock-mutual-exclusion-and-elections.md","hash":"e42d257f8dbdf0559e2946056f70405e2a35b9c1","modified":1462444445000},{"_id":"source/_posts/Concepts-of-DS.md","hash":"cbe8e9446a2898966c29e5341f3c93c253cddc27","modified":1463432582000},{"_id":"source/_posts/File_System.md","hash":"c64bf473b71b0a7bf0469de3c781af2c4b10bef6","modified":1463434857000},{"_id":"source/_posts/Communication-and-Distributed-Objects.md","hash":"6e8d205aa304ce9a936c32f50e19f17f34b61b22","modified":1462443818000},{"_id":"source/_posts/High_Availability.md","hash":"523650dd4ec4bb347badf6005d147587370fab4e","modified":1463434322000},{"_id":"source/_posts/Load_Balancing.md","hash":"9e15f94722afcd5d5ba54e50bb22a3cd7ec3f55f","modified":1463435021000},{"_id":"source/_posts/Global_State.md","hash":"debc7be7529b98ed00789bbc8ed0f81b84e3f6fc","modified":1463433832000},{"_id":"source/_posts/Group_Communication_&_consensus.md","hash":"bb61ed4806bb9fe3d3eaad5f297ec480dc7d2c76","modified":1463433951000},{"_id":"source/_posts/Paxos_Algorithm.md","hash":"f20fdbda56bdffe9d30eee8a6617c7b21ece0751","modified":1463434574000},{"_id":"source/_posts/Naming.md","hash":"9c324cad815e2873530cf08b58fa3c8d2040c16c","modified":1463434658000},{"_id":"source/_posts/Peer_to_Peer_System.md","hash":"5156f2fa80cac117817213a261867f8fc4425184","modified":1463434185000},{"_id":"source/_posts/Replication_Communication.md","hash":"e9c70e37e41217b2d5d2e86fad4774f7f528107f","modified":1463432607000},{"_id":"source/_posts/Segment_tree.md","hash":"420799505b74b26df3ef2df797746299e2ec3684","modified":1463961562000},{"_id":"source/_posts/Types_of_Consistency.md","hash":"c4dada49020d95b75b33912365219c0c31e440e6","modified":1463434450000},{"_id":"source/_posts/随笔一则.md","hash":"5e37a3c0e21d747346f7ead86b4282ea5e735669","modified":1470126880000},{"_id":"source/categories/index.md","hash":"a7f313a220c4a72cd6e1fca4c3997f81fc305e31","modified":1462435227000},{"_id":"source/guestbook/index.md","hash":"5332467da5d442948d068bb8cbf703a5e00fc066","modified":1462434479000},{"_id":"source/tags/index.md","hash":"631ed12774da6ec76ba9f0cb76a7ec6f0c4a13e3","modified":1462435332000},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1462434893000},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/config","hash":"e8fc02380385c31ddfcc0d45dda3bd7af2d97928","modified":1462434893000},{"_id":"source/person.jpg","hash":"bfe79516695002a5f7705f0a9857b70e536af4bb","modified":1463895573000},{"_id":"themes/hexo-theme-next/.git/index","hash":"29b9dd37f06170961f16d91d410ab09872f61df3","modified":1484136643000},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"d9ccfa6d2ef5e408a80bd382511f9c7dd632192f","modified":1462434893000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"784bea46de28a3113d7c91621740f521dae09dce","modified":1462434893000},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"282620a222ea32c062610f4ed6af016f862ccdfa","modified":1462434893000},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"9ee1011db6307df957684c83f39ac7499391924c","modified":1462434893000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"60cc1fb273adfd84137a207dd9d0d00f08605ccd","modified":1462434893000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"d0cad2843283dd2a62cb8d1a2ed182a368210aca","modified":1462434893000},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"d34c5781a231978e66852784ad00c9895a7de022","modified":1462434893000},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"e58766e0af5abf0705ccca4a5fc86d1be03db198","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/.DS_Store","hash":"2197c3a243fb3bc93ba9a16b2c2048567174d536","modified":1462435528000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"a69dbeca07ae34e14a05ebd8fee8e8c191b63ae1","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"27b258cb0111ba29247c3971b9584432f0836c77","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"624d0a5c4f3e936b15539c35d6c06ba9338a4414","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"493580984b5976c8029a4cc8c630a4b6dd48fcfc","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"0b0924774a562ff45ed98e40c4e913df9a77fe08","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"8845b309a9f3912c533f3044480b6a6f2b2d858d","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"f1dcfbc0eef76f1f6be29f31a343338d5bbfe814","modified":1462434893000},{"_id":"source/about/person.jpg","hash":"bfe79516695002a5f7705f0a9857b70e536af4bb","modified":1463895567000},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1462434648000},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"1a4a674117d84b5384d1a7b0110cee97754e1611","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"9c674918e05b1a58d2069d79cc101a01ccedf603","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/js/analytics_google-analytics.js","hash":"f60bcf719bb55280a219c81d8ae50433aa28cf1a","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/js/bootstrap.scrollspy.js","hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/js/fancy-box.js","hash":"18b0ff55461d091b515a1b9e5f843fd2a7516c34","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/js/helpers.js","hash":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/js/motion_fallback.js","hash":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/js/motion_global.js","hash":"8d8f5966826067f48517382cfe4630ec4a1e3f9d","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/js/search-toggle.js","hash":"0bf617514cd86307f0678a226761341100dd86d4","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/.DS_Store","hash":"6569addb6d65445aee0430a314e8c719ad071a2a","modified":1462440099000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/bkdefault_avatar.jpg","hash":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"f557c443e7d5f76bb53482189eb1c90d09331a6f","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"69ae650b056855d5bc11233a4305b99f28cd0f97","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"ec7ce11a34263664d89566c641e1bb65edffdfd3","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/baidushare.swig","hash":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/bootstrap.scrollspy.swig","hash":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/fancy-box.swig","hash":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/mathjax.swig","hash":"abc52fefb276c52cbb19de5c214521dfcf2a10fd","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/helpers.swig","hash":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/motion.swig","hash":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"38f7429e196d47469a6980aa1da00896e0a164de","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"e0395fe527fe675349844ec40760075713f78954","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"91bdd4dc9ef6cf41732e4a87abb9f28be2714a2d","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/old-browsers.swig","hash":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"33d3d6c4417ea88e602dcb116b0604a1955dc5fe","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"8a18d32e2a257dafaaba75353692db901e1dddc5","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_mixins/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_variables/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462434893000},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"73aef8cc9a34887ae9f0a8ef7bc2f7f154184975","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"66985fe77bd323f7f8f634908e17166f51e96e95","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"f5dda1ca48c1b73a0bd34e08413de57699f24083","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"59acc8bf6e6b55f576b001e520e048cd0ca801fb","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-feather/icomoon.eot","hash":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-feather/icomoon.svg","hash":"690836f81c0feb1a49e2253d4f984ad543414986","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-feather/icomoon.ttf","hash":"8c865cffa3845be32406737fcc0466cf9cd965b3","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-fifty-shades/icomoon.ttf","hash":"e0b5e4a23a949bac499908bcef2fae56430e230e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-fifty-shades/icomoon.svg","hash":"f0790da03008b6cb3ae4215cbb656cb4b4599633","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-fifty-shades/icomoon.eot","hash":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-feather/icomoon.woff","hash":"9159eea8641b840e0f7aa6e087dae414044ecdd3","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-fifty-shades/icomoon.woff","hash":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-default/icomoon.eot","hash":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-default/icomoon.woff","hash":"4d0adc55240f331c6de225e23afd76ea5318da9c","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-default/icomoon.ttf","hash":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-default/icomoon.svg","hash":"4f18f0bb815b1aeba57739069c3416106240b7c1","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-icomoon/icomoon.svg","hash":"e316347805eb93425faa678611c5e42a7152da8f","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-icomoon/icomoon.eot","hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-icomoon/icomoon.woff","hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-icomoon/icomoon.ttf","hash":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-linecons/icomoon.ttf","hash":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-linecons/icomoon.woff","hash":"d1ed08a17670fa259df02c1d52dc9ce754343775","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-linecons/icomoon.eot","hash":"176695cc0dc12daba049b2bb889397a7bf2e553c","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/README.md","hash":"e3d6c1f773a7731f9af229dd2c951f0bb58b35ac","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/CHANGELOG.md","hash":"a2141f95381a25e0a8d866f4c40c33c58c1c95a1","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/analytics/google-analytics.swig","hash":"8210537cc42519aba6291d94e3d328032838bd3e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","hash":"bfe79516695002a5f7705f0a9857b70e536af4bb","modified":1443421406000},{"_id":"themes/hexo-theme-next/layout/_scripts/comments/disqus.swig","hash":"07077278b45f10233ae9ac844a3bf01badbbca73","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/comments/duoshuo.swig","hash":"c6dc1f0788ed8321c9a9bf963d0441068342b4d1","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"7fcd57c9f5b64635f2bd4cc8ee7c98d36dceda7a","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"94beb0764ccbbba0c9f5c9886cc656bf879bcfd5","modified":1462434893000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"ee0c2540e8178f390051af7d365a42ae68375afa","modified":1462434893000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-1f7a62a07d7a288f9d4e6d39e815dffe023a01e5.idx","hash":"6be20a091a57b1e6d83e888a45b7f523f02ddf35","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_page/home.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/icon-linecons/icomoon.svg","hash":"888a285a4a7329210b2210742c673611c27425eb","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462434893000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_section/body.styl","hash":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_section/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1462434893000},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"1a4a674117d84b5384d1a7b0110cee97754e1611","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_section/header.styl","hash":"c561330bf3caa3eb958df561fef004c4ac190490","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_section/layout.styl","hash":"4daaadd156ece64ae05908ad6bb0159c8a27c071","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_section/media.styl","hash":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_section/sidebar.styl","hash":"d57e1769ebd2c472d2b27d17a706d3f564f94033","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/back-to-top.styl","hash":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/buttons.styl","hash":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/comments.styl","hash":"54e73681ba6f57ef961138f94d2ee8ac845990c3","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/duoshuo.styl","hash":"b54d0c5a911303cb2fd4bfc84134811a502e5653","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/gallery.styl","hash":"fa6e23ebddb6f235803b51974f36be2a43b2c9c4","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/posts-collapse.styl","hash":"8f9e8f5f65956ccf1d52ff8526392803dff579d3","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/posts-type.styl","hash":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_component/posts-expand.styl","hash":"4b82dbbb6e536e6e8ee3cec6e62c2fd4bea60a09","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_core/helpers.styl","hash":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_core/base.styl","hash":"ff75d9d6b2949588964bb62223ebe88d89127b96","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_core/scaffolding.styl","hash":"d776e241cf650b00ee1dd21b9ff377c250d9eeaa","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_core/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_page/archive.styl","hash":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_core/tables.styl","hash":"be6c1a04595cf38673511366a3d89fcdb046f533","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_page/post-detail.styl","hash":"73796f6f13caa7151a2ee8e55755627e0d189f55","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_page/categories.styl","hash":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_fonts/icon-font.styl","hash":"6fd7caf8194656b90c3b7976295f157bce593b54","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_fonts/icon-feather.styl","hash":"f49f8966496166bd62f79f75a3277d4d5b1102e8","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_fonts/icon-default.styl","hash":"86bd4135afa2589ad074e0cf8ebb054ff3d10f24","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_fonts/icon-fifty-shades.styl","hash":"90e68936ea0f26af93c2c517fe1b891538f9c1b1","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_fonts/lato.styl","hash":"ba5b9109615203bb87937de24126ce50a7a2d8ce","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_schemes/default/_menu.styl","hash":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"b0037a87ee1a613f315c331e8ecf1673c6d82211","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_fonts/icon-linecons.styl","hash":"3874252c8392b5a18e849ac69b6d66999ec1de16","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_schemes/default/index.styl","hash":"2588e55132e10d82c0608f03c2c72a2bace8fa4e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_schemes/default/_search.styl","hash":"05045d24850a982dc8069012c86c878b130b60eb","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/1_s.jpg","hash":"7331d8f057362dd1010309893d81d9fdb5519d30","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/2_s.jpg","hash":"8d895d7597c81d513e02090da4d646d1b6946e14","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/2_b.jpg","hash":"d374396009087680112482ffcfaef4a3e85838a1","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/3_s.jpg","hash":"335e622f0253ab09cbf3fd6577a629367aa9ad47","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/4_s.jpg","hash":"f7ecbbd24aa0fde9fe70b86d2148f753229cb6ed","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/3_b.jpg","hash":"08059c8d631ee0c1429e81e61ee15f899ee1471f","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/ajax.txt","hash":"6ee706bd746d881ab86e7cb24117f9d6832f8101","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/5_s.jpg","hash":"a0517fde348e6539420b3c4a6c80551d76730c2b","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/index.html","hash":"cd1f8eae2b24fa1d577737af099933f86f34e3df","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/iframe.html","hash":"b3480accf98d43e760acef24b5856201e9e902c8","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/lib/jquery.mousewheel-3.0.6.pack.js","hash":"1e1b44eb7cfade680c52d8748846425ecd809bfd","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/5_b.jpg","hash":"d6fdf06b8058a0ff5ce339313996b9ef220431bc","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/1_b.jpg","hash":"f7953162f526e3fc1f37602b0aca0f544d96b095","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/demo/4_b.jpg","hash":"9855aed7b58d5662229427c946801460f5664ffd","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/lib/jquery-1.9.0.min.js","hash":"002da8cbe90fcf32fbdebb72386125079e3805ee","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/sprite.psd","hash":"2669feac27b2d221bdb133acecf0a39f50d9ec27","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/lib/jquery-1.10.1.min.js","hash":"161b78ec52f28657a835e4a5423f03782fd35806","modified":1462434893000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"1a4a674117d84b5384d1a7b0110cee97754e1611","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_vendor/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/css/_common/_vendor/highlight/highlight.styl","hash":"6259f4780f2aae1e6f85b892d8822c1c7ebc28bc","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Bold.eot","hash":"75418bc99e564f8a5c85065d320a2a4c89bc125b","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-BoldItalic.eot","hash":"b213c3c3cf416c311e3f1f0c3718da5d4fe01e91","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Italic.eot","hash":"d8d6965243a228572555233c4c16a530d607688e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Regular.eot","hash":"9414d25ab488458c2e9d2b091b7a348f54f46c49","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Regular.woff","hash":"076694a148237be508af30ea717c9d48851b5f0e","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Bold.woff","hash":"f3fcdf98e2147bce10d719a51abade970fcc5641","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-BoldItalic.woff","hash":"692ae52f109ebe25b0f0a327f9e84b636ea7b00c","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Italic.woff","hash":"48bb1fd23085cbc82b1d55af49a3c60a4bd8917a","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Bold.ttf","hash":"e0de32d86265939f1144116ad0ac5ab9220244c4","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Italic.ttf","hash":"453d1375835f196375be5e9b18e4830b5200a7ed","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-Regular.ttf","hash":"50437629c3570cd7f19f1adf78aa712b9b437f35","modified":1462434893000},{"_id":"themes/hexo-theme-next/source/fonts/lato/Lato-BoldItalic.ttf","hash":"ce4f48583e268f7d0bb83e37bbc6cb2cb11c61ba","modified":1462434893000},{"_id":"source/two.JPG","hash":"baa6fdb20583e3d48c663f07fb21e6b5fa851ea6","modified":1463895573000},{"_id":"source/about/two.JPG","hash":"baa6fdb20583e3d48c663f07fb21e6b5fa851ea6","modified":1463895567000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-1f7a62a07d7a288f9d4e6d39e815dffe023a01e5.pack","hash":"9c379a41214ca4cc26160334990926c60407ab5f","modified":1462434893000},{"_id":"public/search.xml","hash":"010e45387c89caaad11bfa4bd734c296d34274b4","modified":1484143242334},{"_id":"public/about/index.html","hash":"7625a52bfad2ca514a7457d4ac1c1a51c2bce080","modified":1484143242348},{"_id":"public/categories/index.html","hash":"04446a9bd39ae6aaf2df4def7c42ee694e3925e5","modified":1484143242348},{"_id":"public/guestbook/index.html","hash":"360b5a779ff5e8662c1b67140be889fa01facb3f","modified":1484143242349},{"_id":"public/tags/index.html","hash":"ceda533a23158b56346e4c5c2c3ff0979aaa5315","modified":1484143242349},{"_id":"public/archives/index.html","hash":"fb75474ba18666b6e10291193eb3228231d1c63f","modified":1484143242349},{"_id":"public/archives/page/2/index.html","hash":"9d235a6c558bc287346972672cda96c1229aa255","modified":1484143242349},{"_id":"public/archives/2016/index.html","hash":"061a522eeeac2a8ae0f03f7ae59e158de21248de","modified":1484143242349},{"_id":"public/archives/2016/05/index.html","hash":"65f34eaaa4d9f1a754c3f39f603bbac8aa2078fe","modified":1484143242349},{"_id":"public/archives/2016/page/2/index.html","hash":"59a38f4835209371a9dadcaca50a85bd9b24e431","modified":1484143242349},{"_id":"public/archives/2016/05/page/2/index.html","hash":"67439bc75b9d9cedb3620dd90613d7e0a8178a70","modified":1484143242349},{"_id":"public/categories/DS-Notes/index.html","hash":"dae59d5d9895d97fa345ffc41fb449b708311465","modified":1484143242349},{"_id":"public/archives/2016/08/index.html","hash":"fbf8c82b240a59d93143ea11854e2621ce505148","modified":1484143242349},{"_id":"public/categories/DS-Notes/page/2/index.html","hash":"089968c6838865227f7def2b2dcd8a2441758bba","modified":1484143242349},{"_id":"public/categories/解题报告/index.html","hash":"4ba794c2f8cd6eccabf74a231deb23207f75a081","modified":1484143242350},{"_id":"public/categories/Life/index.html","hash":"2c546ee77814aeb8be6e269044ccd265264a4352","modified":1484143242350},{"_id":"public/tags/Distributed-System/index.html","hash":"3c5fd243994dc75f864cd1d4389bbb398fb43e73","modified":1484143242350},{"_id":"public/tags/Distributed-System/page/2/index.html","hash":"ab98e4dfd6e6ab729525f297f7dd12199c30e8b5","modified":1484143242350},{"_id":"public/tags/LeetCode/index.html","hash":"9a00671a002aa3d61dff6c56651de3fc94435dd8","modified":1484143242351},{"_id":"public/tags/All-about-life/index.html","hash":"c44122f47bccd9204a0b44cb6555c83d9ffd29b9","modified":1484143242351},{"_id":"public/2016/08/02/随笔一则/index.html","hash":"b2260d87f638e6916fcb5c7a65424a86545d5ede","modified":1484143242351},{"_id":"public/2016/05/18/Segment_tree/index.html","hash":"e340869cc521498e486bea6d8386683ea5f1261d","modified":1484143242351},{"_id":"public/2016/05/16/Load_Balancing/index.html","hash":"afd575ea3a627bafe89d36f6ed17ecf05eedf4ce","modified":1484143242351},{"_id":"public/2016/05/16/File_System/index.html","hash":"e65171fc4004d5eb37dcef5e58c74517cf666829","modified":1484143242352},{"_id":"public/2016/05/16/Naming/index.html","hash":"a10d8c778d4926223d3eaf6af54c9c17ae113c0b","modified":1484143242352},{"_id":"public/2016/05/16/Paxos_Algorithm/index.html","hash":"14de4ad70206513fb5b71ec9222c6c5302a63aee","modified":1484143242352},{"_id":"public/2016/05/16/Types_of_Consistency/index.html","hash":"8de967662d21107b269f56e48693da8b9471eab5","modified":1484143242352},{"_id":"public/2016/05/16/High_Availability/index.html","hash":"0270f85e3d7396f267b3832878f0023eb45ef665","modified":1484143242353},{"_id":"public/2016/05/16/Peer_to_Peer_System/index.html","hash":"70e9ce30c4ca59dcfe2f3efc61f26b94a3e5d87c","modified":1484143242353},{"_id":"public/2016/05/16/Group_Communication_&_consensus/index.html","hash":"4934e641f7ea0d94e066b6b1ecaa0fef130c290b","modified":1484143242353},{"_id":"public/2016/05/16/Global_State/index.html","hash":"23df871c2796d24cde3ac7089f0e95edd7a83942","modified":1484143242353},{"_id":"public/2016/05/16/Replication_Communication/index.html","hash":"7a5d0c50ab3a7c6f06a0b87a2e3981b75998b64c","modified":1484143242353},{"_id":"public/2016/05/05/Clock-mutual-exclusion-and-elections/index.html","hash":"70916707b68e50907ba663f9acb2e5585d1594af","modified":1484143242353},{"_id":"public/2016/05/05/Communication-and-Distributed-Objects/index.html","hash":"0db777bc54d140b6345edd4ea9c782727f0f2aa8","modified":1484143242353},{"_id":"public/2016/05/05/Concepts-of-DS/index.html","hash":"f1316bc0e4c94aee012061be4a539694e854ebb4","modified":1484143242353},{"_id":"public/page/2/index.html","hash":"0a35d1c4a1e3671e1df916e9d2442c89536a0fbc","modified":1484143242353},{"_id":"public/index.html","hash":"0516000aeb2614cce5e28ae59fec3ba504c8b62d","modified":1484143242353},{"_id":"public/CNAME","hash":"4d7851ef7a0d0ba790d03c1d21c674a0aac00707","modified":1484143242388},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1484143242388},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1484143242388},{"_id":"public/images/bkdefault_avatar.jpg","hash":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1484143242388},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1484143242388},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1484143242388},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1484143242388},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1484143242388},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1484143242388},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1484143242388},{"_id":"public/fonts/icon-feather/icomoon.eot","hash":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d","modified":1484143242388},{"_id":"public/fonts/icon-feather/icomoon.svg","hash":"690836f81c0feb1a49e2253d4f984ad543414986","modified":1484143242388},{"_id":"public/fonts/icon-feather/icomoon.ttf","hash":"8c865cffa3845be32406737fcc0466cf9cd965b3","modified":1484143242388},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","hash":"e0b5e4a23a949bac499908bcef2fae56430e230e","modified":1484143242388},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","hash":"f0790da03008b6cb3ae4215cbb656cb4b4599633","modified":1484143242388},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","hash":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db","modified":1484143242389},{"_id":"public/fonts/icon-feather/icomoon.woff","hash":"9159eea8641b840e0f7aa6e087dae414044ecdd3","modified":1484143242389},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","hash":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4","modified":1484143242389},{"_id":"public/fonts/icon-default/icomoon.eot","hash":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a","modified":1484143242389},{"_id":"public/fonts/icon-default/icomoon.ttf","hash":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2","modified":1484143242389},{"_id":"public/fonts/icon-default/icomoon.woff","hash":"4d0adc55240f331c6de225e23afd76ea5318da9c","modified":1484143242389},{"_id":"public/fonts/icon-default/icomoon.svg","hash":"4f18f0bb815b1aeba57739069c3416106240b7c1","modified":1484143242389},{"_id":"public/fonts/icon-icomoon/icomoon.svg","hash":"e316347805eb93425faa678611c5e42a7152da8f","modified":1484143242389},{"_id":"public/fonts/icon-icomoon/icomoon.eot","hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1484143242390},{"_id":"public/fonts/icon-icomoon/icomoon.woff","hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1484143242390},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","hash":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1484143242390},{"_id":"public/fonts/icon-linecons/icomoon.ttf","hash":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4","modified":1484143242390},{"_id":"public/fonts/icon-linecons/icomoon.woff","hash":"d1ed08a17670fa259df02c1d52dc9ce754343775","modified":1484143242390},{"_id":"public/fonts/icon-linecons/icomoon.eot","hash":"176695cc0dc12daba049b2bb889397a7bf2e553c","modified":1484143242390},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484143242390},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484143242390},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484143242390},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484143242390},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484143242390},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484143242390},{"_id":"public/vendors/fancybox/demo/1_s.jpg","hash":"7331d8f057362dd1010309893d81d9fdb5519d30","modified":1484143242390},{"_id":"public/vendors/fancybox/demo/2_s.jpg","hash":"8d895d7597c81d513e02090da4d646d1b6946e14","modified":1484143242390},{"_id":"public/vendors/fancybox/demo/3_s.jpg","hash":"335e622f0253ab09cbf3fd6577a629367aa9ad47","modified":1484143242390},{"_id":"public/vendors/fancybox/demo/2_b.jpg","hash":"d374396009087680112482ffcfaef4a3e85838a1","modified":1484143242390},{"_id":"public/vendors/fancybox/demo/4_s.jpg","hash":"f7ecbbd24aa0fde9fe70b86d2148f753229cb6ed","modified":1484143242391},{"_id":"public/vendors/fancybox/demo/ajax.txt","hash":"6ee706bd746d881ab86e7cb24117f9d6832f8101","modified":1484143242391},{"_id":"public/vendors/fancybox/demo/5_s.jpg","hash":"a0517fde348e6539420b3c4a6c80551d76730c2b","modified":1484143242391},{"_id":"public/vendors/fancybox/demo/3_b.jpg","hash":"08059c8d631ee0c1429e81e61ee15f899ee1471f","modified":1484143242391},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1484143242391},{"_id":"public/fonts/icon-linecons/icomoon.svg","hash":"888a285a4a7329210b2210742c673611c27425eb","modified":1484143243151},{"_id":"public/vendors/fancybox/demo/1_b.jpg","hash":"f7953162f526e3fc1f37602b0aca0f544d96b095","modified":1484143243154},{"_id":"public/vendors/fancybox/demo/5_b.jpg","hash":"d6fdf06b8058a0ff5ce339313996b9ef220431bc","modified":1484143243156},{"_id":"public/vendors/fancybox/demo/4_b.jpg","hash":"9855aed7b58d5662229427c946801460f5664ffd","modified":1484143243156},{"_id":"public/js/analytics_google-analytics.js","hash":"f60bcf719bb55280a219c81d8ae50433aa28cf1a","modified":1484143243161},{"_id":"public/js/bootstrap.scrollspy.js","hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1484143243161},{"_id":"public/js/helpers.js","hash":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1484143243161},{"_id":"public/js/fancy-box.js","hash":"18b0ff55461d091b515a1b9e5f843fd2a7516c34","modified":1484143243162},{"_id":"public/js/motion_fallback.js","hash":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1484143243162},{"_id":"public/js/motion_global.js","hash":"8d8f5966826067f48517382cfe4630ec4a1e3f9d","modified":1484143243162},{"_id":"public/js/search-toggle.js","hash":"0bf617514cd86307f0678a226761341100dd86d4","modified":1484143243162},{"_id":"public/vendors/fancybox/CHANGELOG.html","hash":"aa5bb9ee9d85403b6c98a49d963dd01259b1a1dd","modified":1484143243162},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1484143243162},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1484143243162},{"_id":"public/vendors/fancybox/README.html","hash":"bb11f3dec7083317a2b580779eff3c5fabfe609e","modified":1484143243162},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1484143243162},{"_id":"public/vendors/fancybox/demo/index.html","hash":"cd1f8eae2b24fa1d577737af099933f86f34e3df","modified":1484143243162},{"_id":"public/vendors/fancybox/demo/iframe.html","hash":"b3480accf98d43e760acef24b5856201e9e902c8","modified":1484143243162},{"_id":"public/vendors/fancybox/lib/jquery.mousewheel-3.0.6.pack.js","hash":"1e1b44eb7cfade680c52d8748846425ecd809bfd","modified":1484143243162},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1484143243162},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1484143243162},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1484143243162},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1484143243162},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1484143243162},{"_id":"public/css/main.css","hash":"b47cba0f097752a5f0cefc87b660bf04b42a364a","modified":1484143243162},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1484143243162},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1484143243162},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1484143243162},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1484143243162},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1484143243162},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1484143243162},{"_id":"public/vendors/fancybox/lib/jquery-1.9.0.min.js","hash":"002da8cbe90fcf32fbdebb72386125079e3805ee","modified":1484143243162},{"_id":"public/vendors/fancybox/lib/jquery-1.10.1.min.js","hash":"161b78ec52f28657a835e4a5423f03782fd35806","modified":1484143243162},{"_id":"public/person.jpg","hash":"bfe79516695002a5f7705f0a9857b70e536af4bb","modified":1484143243163},{"_id":"public/about/person.jpg","hash":"bfe79516695002a5f7705f0a9857b70e536af4bb","modified":1484143243163},{"_id":"public/images/avatar.jpg","hash":"bfe79516695002a5f7705f0a9857b70e536af4bb","modified":1484143243163},{"_id":"public/vendors/fancybox/sprite.psd","hash":"2669feac27b2d221bdb133acecf0a39f50d9ec27","modified":1484143243165},{"_id":"public/fonts/lato/Lato-Bold.eot","hash":"75418bc99e564f8a5c85065d320a2a4c89bc125b","modified":1484143243170},{"_id":"public/fonts/lato/Lato-BoldItalic.eot","hash":"b213c3c3cf416c311e3f1f0c3718da5d4fe01e91","modified":1484143243170},{"_id":"public/fonts/lato/Lato-Italic.eot","hash":"d8d6965243a228572555233c4c16a530d607688e","modified":1484143243170},{"_id":"public/fonts/lato/Lato-Regular.eot","hash":"9414d25ab488458c2e9d2b091b7a348f54f46c49","modified":1484143243170},{"_id":"public/fonts/lato/Lato-Regular.woff","hash":"076694a148237be508af30ea717c9d48851b5f0e","modified":1484143243171},{"_id":"public/fonts/lato/Lato-Bold.woff","hash":"f3fcdf98e2147bce10d719a51abade970fcc5641","modified":1484143243175},{"_id":"public/fonts/lato/Lato-BoldItalic.woff","hash":"692ae52f109ebe25b0f0a327f9e84b636ea7b00c","modified":1484143243175},{"_id":"public/fonts/lato/Lato-Italic.woff","hash":"48bb1fd23085cbc82b1d55af49a3c60a4bd8917a","modified":1484143243176},{"_id":"public/fonts/lato/Lato-Bold.ttf","hash":"e0de32d86265939f1144116ad0ac5ab9220244c4","modified":1484143243190},{"_id":"public/fonts/lato/Lato-Italic.ttf","hash":"453d1375835f196375be5e9b18e4830b5200a7ed","modified":1484143243190},{"_id":"public/fonts/lato/Lato-Regular.ttf","hash":"50437629c3570cd7f19f1adf78aa712b9b437f35","modified":1484143243191},{"_id":"public/fonts/lato/Lato-BoldItalic.ttf","hash":"ce4f48583e268f7d0bb83e37bbc6cb2cb11c61ba","modified":1484143243191},{"_id":"public/about/two.JPG","hash":"baa6fdb20583e3d48c663f07fb21e6b5fa851ea6","modified":1484143243206},{"_id":"public/two.JPG","hash":"baa6fdb20583e3d48c663f07fb21e6b5fa851ea6","modified":1484143243209}],"Category":[{"name":"DS_Notes","_id":"cixt0kdr90005sss2nipql4eu"},{"name":"解题报告","_id":"cixt0kdsi0017sss2covl7g3r"},{"name":"Life","_id":"cixt0kdsm001fsss2mhofcic9"}],"Data":[],"Page":[{"title":"about","date":"2016-05-05T07:57:06.000Z","_content":"<p align=\"center\">\n<img src=\"./person.jpg\" width=\"300\"></p>\n\n**My name is Qiyao, and I...**\n- am A CMUer studying Software Engineering\n- am interested in distributed system and big data\n- currently intern as an SWE at Uber\n- speak Chinese, English and some Deutsch\n- like LOL and MMA\n- love exploring and making friends with interesting people\n- recently fall in love with rock climbing\n- always dig and embrace cool stuff\n\n<p align=\"center\">\n<img src=\"./two.JPG\" style=\"text-align: center;\" width=\"500\"></p>\n\n**My favorite foreign author is George Orwell, I read novels and poems, now probably more blogs and talks as knowledge source.**\n\n**I love folk music because they tell stories.**\n\n**I play ukulele. Recently got one from my girlfriend as a birthday gift.**\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-05-05 15:57:06\n---\n<p align=\"center\">\n<img src=\"./person.jpg\" width=\"300\"></p>\n\n**My name is Qiyao, and I...**\n- am A CMUer studying Software Engineering\n- am interested in distributed system and big data\n- currently intern as an SWE at Uber\n- speak Chinese, English and some Deutsch\n- like LOL and MMA\n- love exploring and making friends with interesting people\n- recently fall in love with rock climbing\n- always dig and embrace cool stuff\n\n<p align=\"center\">\n<img src=\"./two.JPG\" style=\"text-align: center;\" width=\"500\"></p>\n\n**My favorite foreign author is George Orwell, I read novels and poems, now probably more blogs and talks as knowledge source.**\n\n**I love folk music because they tell stories.**\n\n**I play ukulele. Recently got one from my girlfriend as a birthday gift.**\n","updated":"2016-08-02T08:07:18.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cixt0kdqv0000sss24igpbbuf","content":"<p align=\"center\"><br><img src=\"./person.jpg\" width=\"300\"></p>\n\n<p><strong>My name is Qiyao, and I…</strong></p>\n<ul>\n<li>am A CMUer studying Software Engineering</li>\n<li>am interested in distributed system and big data</li>\n<li>currently intern as an SWE at Uber</li>\n<li>speak Chinese, English and some Deutsch</li>\n<li>like LOL and MMA</li>\n<li>love exploring and making friends with interesting people</li>\n<li>recently fall in love with rock climbing</li>\n<li>always dig and embrace cool stuff</li>\n</ul>\n<p align=\"center\"><br><img src=\"./two.JPG\" style=\"text-align: center;\" width=\"500\"></p>\n\n<p><strong>My favorite foreign author is George Orwell, I read novels and poems, now probably more blogs and talks as knowledge source.</strong></p>\n<p><strong>I love folk music because they tell stories.</strong></p>\n<p><strong>I play ukulele. Recently got one from my girlfriend as a birthday gift.</strong></p>\n","excerpt":"","more":"<p align=\"center\"><br><img src=\"./person.jpg\" width=\"300\"></p>\n\n<p><strong>My name is Qiyao, and I…</strong></p>\n<ul>\n<li>am A CMUer studying Software Engineering</li>\n<li>am interested in distributed system and big data</li>\n<li>currently intern as an SWE at Uber</li>\n<li>speak Chinese, English and some Deutsch</li>\n<li>like LOL and MMA</li>\n<li>love exploring and making friends with interesting people</li>\n<li>recently fall in love with rock climbing</li>\n<li>always dig and embrace cool stuff</li>\n</ul>\n<p align=\"center\"><br><img src=\"./two.JPG\" style=\"text-align: center;\" width=\"500\"></p>\n\n<p><strong>My favorite foreign author is George Orwell, I read novels and poems, now probably more blogs and talks as knowledge source.</strong></p>\n<p><strong>I love folk music because they tell stories.</strong></p>\n<p><strong>I play ukulele. Recently got one from my girlfriend as a birthday gift.</strong></p>\n"},{"title":"分类","date":"2014-12-22T04:39:04.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\ncomments: true\n---\n","updated":"2016-05-05T08:00:27.000Z","path":"categories/index.html","layout":"page","_id":"cixt0kdr20002sss2sucqqve9","content":"","excerpt":"","more":""},{"title":"guestbook","date":"2016-05-05T07:47:59.000Z","_content":"","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2016-05-05 15:47:59\n---\n","updated":"2016-05-05T07:47:59.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"cixt0kdr90006sss2xssxbl9t","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-05-05T08:01:42.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-05 16:01:42\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-05-05T08:02:12.000Z","path":"tags/index.html","layout":"page","_id":"cixt0kdre0008sss29yzgevv0","content":"","excerpt":"","more":""}],"Post":[{"title":"Clock_mutual_exclusion_and_elections","date":"2016-05-05T10:22:06.000Z","description":"This article mainly consists of three parts. Part 1 talks about two timestamp method to record the sequence of events in distributed system-- Vector clock and logical clock. Part 2 discusses several mutual exclusion algorithm, and especially introduce Maekawa's algorithm. Part 3 descrive two leader election method, ring-based algorithm and bull algorithm. Both of which pick up the node with the largest id as leader.","_content":"\n**Part 1 Time and Clock**\n---\nLamport's Logical Clock concerns the **events order** in system, it could let us know the order of events within 1) same thread; 2) different processes in same host; 3) different computers.\n\nThe core concepts of logical clock is described as \"**happened before**\" (causally), and the relationship is transitive. For example, if `\"a->b\"`, and `\"b->c\"`, then `\"a->c\"` must be true.\n\nIf we define the timestamp of a specific event a as `Ci(a)`, i means the index of process `Pi`, if `\"a->b\"`, then `\"Ci(a) < Ci(b)\"`.\n\nCalculating `Ci`: if the previous timestamp of the process is Tm, then the current timestamp should be `Ck:=max{Ck,Tm}+1`, Ck in the bracket means the sender's latest timestamp.\n\nSuch logical clock mechanism would clearly identify the events ordering when sending a message. However, the events ordering could not be deducted by reversely comparing the timestamp, to be more clear, `\"C(a) > C(b)\"` can't tell `b->a`, as you can see in the sequence above.\n\nIn order to solve that problem, we introduce **vector clock**.\n\nWe define `Pi` has timestamp `Ci=(Ci[1], Ci[2],...,Ci[n])`. When a process execute a local message, it simply updates its own timestamp (e.g. by adding 1) `Ck:=Ck+1`; if a process receives a remote message, the timestamp that doesn't represent its own would update with the larger one between the received timestamp and its previous timestamp. its own timestamp would update like this: `Ck:=max{Ck,Tm}+1`.\nover B: (1,3,3)\n\n> **Note**: How vector clock overcome the reverse comparison limitation of logical clock?\n\n> - When it comes to **comparison**, only if all the elements in the timestamp vector is smaller or equal than the compared vector, can we say that the event happens before the compared event, and **vice versa**!\n\n\n----------\n\n\n**Part 2 Mutual Exclusions**\n---\n**Strategy**\n\n- Centralized ME\nA process Pi sends a request message to a coordinator process, asking for granted permission to access the coordinator. When process Pi receives the granted message and executes in the critical session, it would send release message to the coordinator.\n\n- Distributed ME\n\n- Token-based algorithm\nThe processes only have to know about their successors. We put the processes into the ring. When process needs critical session, it would send token into the token ring. If current process needs CS, holds token and execute. Else passes the token to its successor.\n\n> **Notes:** Problem of token-based algorithm\n>  - The algorithm is not fault tolerant. What if the token is lost? What if the token is duplicated? Which one goes first? Block situations?\n>  - The algorithm would cause performance problems such as synchronization delay and response delay by passing tokens to successors one by one.\n\n- Ricart & Agrawala algorithm (Improvement of Lamport's algorithm)\nThe algorithm uses logical clock to track down events order, broadcasting event timestamps. When the receiver receives multiple timestamps, it would compare the timestamps, making the larger one to stay in queue and forwarding \"OK\" message to the small timestamp sender.\n\n> **Note:** Problems of Ricart & Agrawala algorithm\n> - Still not fault tolerant because of broadcasting, what if one receiver fails down?\n> - Also, the algorithm is only optimal with respect number of messages. If the message get to be flooding, the network will be burdened because of broadcasting.\n\n\n- Maekawa's algorithm\n\nMaekawa's algorithm overcomes flooding message problem in Ricarts & Agrawala's algorithm by configuring **Request Sets**, it also introduces concepts of \"vote\" to records whether the process has granted some other process to enter the critical session.\n\n> **Four properties**\n> - **Pairwise Non-null Intersection Property** \n> (**required**)\n> It guarantees that no two groups would enter CS at the same time. (CS is for critical session)\n> rest of the rules are not mandatory, but will let the algorithm be more efficient\n> - **Self-contain property**\n> One less messages need to send through network per group\n> - **Equal-effort property**\n> Which means that each group has same amount of members. Used for balancing the load of each nodes.\n> - **Equal-responsibility property**\n> Which means that every node is in the same number of groups. Used for relieving burdens.\n\n**Leader Election**\n\n- Ring-based elections\nAny Pi begins election by sending election messages to its successor. It will find the largest process id and select it as the leader. If leader is selected, it would send \"victory\" message to other processes.\n\n- Bully algorithm\nHappens when Pi detects failure of coordinator:\nBully algorithm also relies on the process id. After a process broadcasts election messages to others, the processes with smaller id do not response, meanwhile the processes with larger id response with answering messages, and start other elections\nTo the sender itself, if it doesn't receive answering messages, it broadcasting victory message. If it receives answering messages, it waits for victory messages. If it doesn't receive victory messages after a while, it would restart election.\n\n","source":"_posts/Clock-mutual-exclusion-and-elections.md","raw":"---\ntitle: Clock_mutual_exclusion_and_elections\ndate: 2016-05-05 18:22:06\ncategory: DS_Notes\ntags: Distributed_System\ndescription: This article mainly consists of three parts. Part 1 talks about two timestamp method to record the sequence of events in distributed system-- Vector clock and logical clock. Part 2 discusses several mutual exclusion algorithm, and especially introduce Maekawa's algorithm. Part 3 descrive two leader election method, ring-based algorithm and bull algorithm. Both of which pick up the node with the largest id as leader.\n---\n\n**Part 1 Time and Clock**\n---\nLamport's Logical Clock concerns the **events order** in system, it could let us know the order of events within 1) same thread; 2) different processes in same host; 3) different computers.\n\nThe core concepts of logical clock is described as \"**happened before**\" (causally), and the relationship is transitive. For example, if `\"a->b\"`, and `\"b->c\"`, then `\"a->c\"` must be true.\n\nIf we define the timestamp of a specific event a as `Ci(a)`, i means the index of process `Pi`, if `\"a->b\"`, then `\"Ci(a) < Ci(b)\"`.\n\nCalculating `Ci`: if the previous timestamp of the process is Tm, then the current timestamp should be `Ck:=max{Ck,Tm}+1`, Ck in the bracket means the sender's latest timestamp.\n\nSuch logical clock mechanism would clearly identify the events ordering when sending a message. However, the events ordering could not be deducted by reversely comparing the timestamp, to be more clear, `\"C(a) > C(b)\"` can't tell `b->a`, as you can see in the sequence above.\n\nIn order to solve that problem, we introduce **vector clock**.\n\nWe define `Pi` has timestamp `Ci=(Ci[1], Ci[2],...,Ci[n])`. When a process execute a local message, it simply updates its own timestamp (e.g. by adding 1) `Ck:=Ck+1`; if a process receives a remote message, the timestamp that doesn't represent its own would update with the larger one between the received timestamp and its previous timestamp. its own timestamp would update like this: `Ck:=max{Ck,Tm}+1`.\nover B: (1,3,3)\n\n> **Note**: How vector clock overcome the reverse comparison limitation of logical clock?\n\n> - When it comes to **comparison**, only if all the elements in the timestamp vector is smaller or equal than the compared vector, can we say that the event happens before the compared event, and **vice versa**!\n\n\n----------\n\n\n**Part 2 Mutual Exclusions**\n---\n**Strategy**\n\n- Centralized ME\nA process Pi sends a request message to a coordinator process, asking for granted permission to access the coordinator. When process Pi receives the granted message and executes in the critical session, it would send release message to the coordinator.\n\n- Distributed ME\n\n- Token-based algorithm\nThe processes only have to know about their successors. We put the processes into the ring. When process needs critical session, it would send token into the token ring. If current process needs CS, holds token and execute. Else passes the token to its successor.\n\n> **Notes:** Problem of token-based algorithm\n>  - The algorithm is not fault tolerant. What if the token is lost? What if the token is duplicated? Which one goes first? Block situations?\n>  - The algorithm would cause performance problems such as synchronization delay and response delay by passing tokens to successors one by one.\n\n- Ricart & Agrawala algorithm (Improvement of Lamport's algorithm)\nThe algorithm uses logical clock to track down events order, broadcasting event timestamps. When the receiver receives multiple timestamps, it would compare the timestamps, making the larger one to stay in queue and forwarding \"OK\" message to the small timestamp sender.\n\n> **Note:** Problems of Ricart & Agrawala algorithm\n> - Still not fault tolerant because of broadcasting, what if one receiver fails down?\n> - Also, the algorithm is only optimal with respect number of messages. If the message get to be flooding, the network will be burdened because of broadcasting.\n\n\n- Maekawa's algorithm\n\nMaekawa's algorithm overcomes flooding message problem in Ricarts & Agrawala's algorithm by configuring **Request Sets**, it also introduces concepts of \"vote\" to records whether the process has granted some other process to enter the critical session.\n\n> **Four properties**\n> - **Pairwise Non-null Intersection Property** \n> (**required**)\n> It guarantees that no two groups would enter CS at the same time. (CS is for critical session)\n> rest of the rules are not mandatory, but will let the algorithm be more efficient\n> - **Self-contain property**\n> One less messages need to send through network per group\n> - **Equal-effort property**\n> Which means that each group has same amount of members. Used for balancing the load of each nodes.\n> - **Equal-responsibility property**\n> Which means that every node is in the same number of groups. Used for relieving burdens.\n\n**Leader Election**\n\n- Ring-based elections\nAny Pi begins election by sending election messages to its successor. It will find the largest process id and select it as the leader. If leader is selected, it would send \"victory\" message to other processes.\n\n- Bully algorithm\nHappens when Pi detects failure of coordinator:\nBully algorithm also relies on the process id. After a process broadcasts election messages to others, the processes with smaller id do not response, meanwhile the processes with larger id response with answering messages, and start other elections\nTo the sender itself, if it doesn't receive answering messages, it broadcasting victory message. If it receives answering messages, it waits for victory messages. If it doesn't receive victory messages after a while, it would restart election.\n\n","slug":"Clock-mutual-exclusion-and-elections","published":1,"updated":"2016-05-05T10:34:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdqx0001sss2r1dvuepp","content":"<h2 id=\"Part-1-Time-and-Clock\"><a href=\"#Part-1-Time-and-Clock\" class=\"headerlink\" title=\"Part 1 Time and Clock\"></a><strong>Part 1 Time and Clock</strong></h2><p>Lamport’s Logical Clock concerns the <strong>events order</strong> in system, it could let us know the order of events within 1) same thread; 2) different processes in same host; 3) different computers.</p>\n<p>The core concepts of logical clock is described as “<strong>happened before</strong>“ (causally), and the relationship is transitive. For example, if <code>&quot;a-&gt;b&quot;</code>, and <code>&quot;b-&gt;c&quot;</code>, then <code>&quot;a-&gt;c&quot;</code> must be true.</p>\n<p>If we define the timestamp of a specific event a as <code>Ci(a)</code>, i means the index of process <code>Pi</code>, if <code>&quot;a-&gt;b&quot;</code>, then <code>&quot;Ci(a) &lt; Ci(b)&quot;</code>.</p>\n<p>Calculating <code>Ci</code>: if the previous timestamp of the process is Tm, then the current timestamp should be <code>Ck:=max{Ck,Tm}+1</code>, Ck in the bracket means the sender’s latest timestamp.</p>\n<p>Such logical clock mechanism would clearly identify the events ordering when sending a message. However, the events ordering could not be deducted by reversely comparing the timestamp, to be more clear, <code>&quot;C(a) &gt; C(b)&quot;</code> can’t tell <code>b-&gt;a</code>, as you can see in the sequence above.</p>\n<p>In order to solve that problem, we introduce <strong>vector clock</strong>.</p>\n<p>We define <code>Pi</code> has timestamp <code>Ci=(Ci[1], Ci[2],...,Ci[n])</code>. When a process execute a local message, it simply updates its own timestamp (e.g. by adding 1) <code>Ck:=Ck+1</code>; if a process receives a remote message, the timestamp that doesn’t represent its own would update with the larger one between the received timestamp and its previous timestamp. its own timestamp would update like this: <code>Ck:=max{Ck,Tm}+1</code>.<br>over B: (1,3,3)</p>\n<blockquote>\n<p><strong>Note</strong>: How vector clock overcome the reverse comparison limitation of logical clock?</p>\n<ul>\n<li>When it comes to <strong>comparison</strong>, only if all the elements in the timestamp vector is smaller or equal than the compared vector, can we say that the event happens before the compared event, and <strong>vice versa</strong>!</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"Part-2-Mutual-Exclusions\"><a href=\"#Part-2-Mutual-Exclusions\" class=\"headerlink\" title=\"Part 2 Mutual Exclusions\"></a><strong>Part 2 Mutual Exclusions</strong></h2><p><strong>Strategy</strong></p>\n<ul>\n<li><p>Centralized ME<br>A process Pi sends a request message to a coordinator process, asking for granted permission to access the coordinator. When process Pi receives the granted message and executes in the critical session, it would send release message to the coordinator.</p>\n</li>\n<li><p>Distributed ME</p>\n</li>\n<li><p>Token-based algorithm<br>The processes only have to know about their successors. We put the processes into the ring. When process needs critical session, it would send token into the token ring. If current process needs CS, holds token and execute. Else passes the token to its successor.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Notes:</strong> Problem of token-based algorithm</p>\n<ul>\n<li>The algorithm is not fault tolerant. What if the token is lost? What if the token is duplicated? Which one goes first? Block situations?</li>\n<li>The algorithm would cause performance problems such as synchronization delay and response delay by passing tokens to successors one by one.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Ricart &amp; Agrawala algorithm (Improvement of Lamport’s algorithm)<br>The algorithm uses logical clock to track down events order, broadcasting event timestamps. When the receiver receives multiple timestamps, it would compare the timestamps, making the larger one to stay in queue and forwarding “OK” message to the small timestamp sender.</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Problems of Ricart &amp; Agrawala algorithm</p>\n<ul>\n<li>Still not fault tolerant because of broadcasting, what if one receiver fails down?</li>\n<li>Also, the algorithm is only optimal with respect number of messages. If the message get to be flooding, the network will be burdened because of broadcasting.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Maekawa’s algorithm</li>\n</ul>\n<p>Maekawa’s algorithm overcomes flooding message problem in Ricarts &amp; Agrawala’s algorithm by configuring <strong>Request Sets</strong>, it also introduces concepts of “vote” to records whether the process has granted some other process to enter the critical session.</p>\n<blockquote>\n<p><strong>Four properties</strong></p>\n<ul>\n<li><strong>Pairwise Non-null Intersection Property</strong><br>(<strong>required</strong>)<br>It guarantees that no two groups would enter CS at the same time. (CS is for critical session)<br>rest of the rules are not mandatory, but will let the algorithm be more efficient</li>\n<li><strong>Self-contain property</strong><br>One less messages need to send through network per group</li>\n<li><strong>Equal-effort property</strong><br>Which means that each group has same amount of members. Used for balancing the load of each nodes.</li>\n<li><strong>Equal-responsibility property</strong><br>Which means that every node is in the same number of groups. Used for relieving burdens.</li>\n</ul>\n</blockquote>\n<p><strong>Leader Election</strong></p>\n<ul>\n<li><p>Ring-based elections<br>Any Pi begins election by sending election messages to its successor. It will find the largest process id and select it as the leader. If leader is selected, it would send “victory” message to other processes.</p>\n</li>\n<li><p>Bully algorithm<br>Happens when Pi detects failure of coordinator:<br>Bully algorithm also relies on the process id. After a process broadcasts election messages to others, the processes with smaller id do not response, meanwhile the processes with larger id response with answering messages, and start other elections<br>To the sender itself, if it doesn’t receive answering messages, it broadcasting victory message. If it receives answering messages, it waits for victory messages. If it doesn’t receive victory messages after a while, it would restart election.</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Part-1-Time-and-Clock\"><a href=\"#Part-1-Time-and-Clock\" class=\"headerlink\" title=\"Part 1 Time and Clock\"></a><strong>Part 1 Time and Clock</strong></h2><p>Lamport’s Logical Clock concerns the <strong>events order</strong> in system, it could let us know the order of events within 1) same thread; 2) different processes in same host; 3) different computers.</p>\n<p>The core concepts of logical clock is described as “<strong>happened before</strong>“ (causally), and the relationship is transitive. For example, if <code>&quot;a-&gt;b&quot;</code>, and <code>&quot;b-&gt;c&quot;</code>, then <code>&quot;a-&gt;c&quot;</code> must be true.</p>\n<p>If we define the timestamp of a specific event a as <code>Ci(a)</code>, i means the index of process <code>Pi</code>, if <code>&quot;a-&gt;b&quot;</code>, then <code>&quot;Ci(a) &lt; Ci(b)&quot;</code>.</p>\n<p>Calculating <code>Ci</code>: if the previous timestamp of the process is Tm, then the current timestamp should be <code>Ck:=max{Ck,Tm}+1</code>, Ck in the bracket means the sender’s latest timestamp.</p>\n<p>Such logical clock mechanism would clearly identify the events ordering when sending a message. However, the events ordering could not be deducted by reversely comparing the timestamp, to be more clear, <code>&quot;C(a) &gt; C(b)&quot;</code> can’t tell <code>b-&gt;a</code>, as you can see in the sequence above.</p>\n<p>In order to solve that problem, we introduce <strong>vector clock</strong>.</p>\n<p>We define <code>Pi</code> has timestamp <code>Ci=(Ci[1], Ci[2],...,Ci[n])</code>. When a process execute a local message, it simply updates its own timestamp (e.g. by adding 1) <code>Ck:=Ck+1</code>; if a process receives a remote message, the timestamp that doesn’t represent its own would update with the larger one between the received timestamp and its previous timestamp. its own timestamp would update like this: <code>Ck:=max{Ck,Tm}+1</code>.<br>over B: (1,3,3)</p>\n<blockquote>\n<p><strong>Note</strong>: How vector clock overcome the reverse comparison limitation of logical clock?</p>\n<ul>\n<li>When it comes to <strong>comparison</strong>, only if all the elements in the timestamp vector is smaller or equal than the compared vector, can we say that the event happens before the compared event, and <strong>vice versa</strong>!</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"Part-2-Mutual-Exclusions\"><a href=\"#Part-2-Mutual-Exclusions\" class=\"headerlink\" title=\"Part 2 Mutual Exclusions\"></a><strong>Part 2 Mutual Exclusions</strong></h2><p><strong>Strategy</strong></p>\n<ul>\n<li><p>Centralized ME<br>A process Pi sends a request message to a coordinator process, asking for granted permission to access the coordinator. When process Pi receives the granted message and executes in the critical session, it would send release message to the coordinator.</p>\n</li>\n<li><p>Distributed ME</p>\n</li>\n<li><p>Token-based algorithm<br>The processes only have to know about their successors. We put the processes into the ring. When process needs critical session, it would send token into the token ring. If current process needs CS, holds token and execute. Else passes the token to its successor.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Notes:</strong> Problem of token-based algorithm</p>\n<ul>\n<li>The algorithm is not fault tolerant. What if the token is lost? What if the token is duplicated? Which one goes first? Block situations?</li>\n<li>The algorithm would cause performance problems such as synchronization delay and response delay by passing tokens to successors one by one.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Ricart &amp; Agrawala algorithm (Improvement of Lamport’s algorithm)<br>The algorithm uses logical clock to track down events order, broadcasting event timestamps. When the receiver receives multiple timestamps, it would compare the timestamps, making the larger one to stay in queue and forwarding “OK” message to the small timestamp sender.</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Problems of Ricart &amp; Agrawala algorithm</p>\n<ul>\n<li>Still not fault tolerant because of broadcasting, what if one receiver fails down?</li>\n<li>Also, the algorithm is only optimal with respect number of messages. If the message get to be flooding, the network will be burdened because of broadcasting.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Maekawa’s algorithm</li>\n</ul>\n<p>Maekawa’s algorithm overcomes flooding message problem in Ricarts &amp; Agrawala’s algorithm by configuring <strong>Request Sets</strong>, it also introduces concepts of “vote” to records whether the process has granted some other process to enter the critical session.</p>\n<blockquote>\n<p><strong>Four properties</strong></p>\n<ul>\n<li><strong>Pairwise Non-null Intersection Property</strong><br>(<strong>required</strong>)<br>It guarantees that no two groups would enter CS at the same time. (CS is for critical session)<br>rest of the rules are not mandatory, but will let the algorithm be more efficient</li>\n<li><strong>Self-contain property</strong><br>One less messages need to send through network per group</li>\n<li><strong>Equal-effort property</strong><br>Which means that each group has same amount of members. Used for balancing the load of each nodes.</li>\n<li><strong>Equal-responsibility property</strong><br>Which means that every node is in the same number of groups. Used for relieving burdens.</li>\n</ul>\n</blockquote>\n<p><strong>Leader Election</strong></p>\n<ul>\n<li><p>Ring-based elections<br>Any Pi begins election by sending election messages to its successor. It will find the largest process id and select it as the leader. If leader is selected, it would send “victory” message to other processes.</p>\n</li>\n<li><p>Bully algorithm<br>Happens when Pi detects failure of coordinator:<br>Bully algorithm also relies on the process id. After a process broadcasts election messages to others, the processes with smaller id do not response, meanwhile the processes with larger id response with answering messages, and start other elections<br>To the sender itself, if it doesn’t receive answering messages, it broadcasting victory message. If it receives answering messages, it waits for victory messages. If it doesn’t receive victory messages after a while, it would restart election.</p>\n</li>\n</ul>\n"},{"title":"Concepts of DS","date":"2016-05-05T10:01:38.000Z","_content":"\nDS Concepts\n---------\n\n - A distributed system is one where several computations coordinate across machine boundaries\n  - To coordinate, they must communicate, and must know of each other’s existence\n   -  To coordinate, they must have common things (state) to “talk” about\n\n----------\n<!--more-->\n\nDS Challenges\n-------------\n1. Global Resource Access\n2. Concurrency\n3. High Availability / Fault Tolerance (**Inevitable**)\n4. Transparency\n5. Management and Maintenance\n6. Security\n7. List item\n8. Scalability\n9. Timeliness (**Intolerant** for real-time system)\n10. Openness (Publishing key programming interfaces)\n\n> **Note: simple Web-based DS work**\n\n> Client-server\n> \n> - Clients: Generalized, large number, consumer of service\n> - Protocol: File retrievals, SQL, HTTP over TCP/IP\n> - Server: specialized, a provider of services (file services, db services, groupware services, web services)\n> - Naming, authentication, authorization, auditing and logging, billing\n> - Load balancing\n> \n> Difference between consistency and consensus\n> \n> Consistency means the content and time ordering should be consistent in different nodes, consensus means that different nodes share an agreement on certain protocol or value.\n","source":"_posts/Concepts-of-DS.md","raw":"---\ntitle: Concepts of DS\ndate: 2016-05-05 18:01:38\ncategory: DS_Notes\ntags: Distributed_System\n---\n\nDS Concepts\n---------\n\n - A distributed system is one where several computations coordinate across machine boundaries\n  - To coordinate, they must communicate, and must know of each other’s existence\n   -  To coordinate, they must have common things (state) to “talk” about\n\n----------\n<!--more-->\n\nDS Challenges\n-------------\n1. Global Resource Access\n2. Concurrency\n3. High Availability / Fault Tolerance (**Inevitable**)\n4. Transparency\n5. Management and Maintenance\n6. Security\n7. List item\n8. Scalability\n9. Timeliness (**Intolerant** for real-time system)\n10. Openness (Publishing key programming interfaces)\n\n> **Note: simple Web-based DS work**\n\n> Client-server\n> \n> - Clients: Generalized, large number, consumer of service\n> - Protocol: File retrievals, SQL, HTTP over TCP/IP\n> - Server: specialized, a provider of services (file services, db services, groupware services, web services)\n> - Naming, authentication, authorization, auditing and logging, billing\n> - Load balancing\n> \n> Difference between consistency and consensus\n> \n> Consistency means the content and time ordering should be consistent in different nodes, consensus means that different nodes share an agreement on certain protocol or value.\n","slug":"Concepts-of-DS","published":1,"updated":"2016-05-16T21:03:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdr30003sss2m9g7tvv6","content":"<h2 id=\"DS-Concepts\"><a href=\"#DS-Concepts\" class=\"headerlink\" title=\"DS Concepts\"></a>DS Concepts</h2><ul>\n<li>A distributed system is one where several computations coordinate across machine boundaries<ul>\n<li>To coordinate, they must communicate, and must know of each other’s existence</li>\n<li>To coordinate, they must have common things (state) to “talk” about</li>\n</ul>\n</li>\n</ul>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"DS-Challenges\"><a href=\"#DS-Challenges\" class=\"headerlink\" title=\"DS Challenges\"></a>DS Challenges</h2><ol>\n<li>Global Resource Access</li>\n<li>Concurrency</li>\n<li>High Availability / Fault Tolerance (<strong>Inevitable</strong>)</li>\n<li>Transparency</li>\n<li>Management and Maintenance</li>\n<li>Security</li>\n<li>List item</li>\n<li>Scalability</li>\n<li>Timeliness (<strong>Intolerant</strong> for real-time system)</li>\n<li>Openness (Publishing key programming interfaces)</li>\n</ol>\n<blockquote>\n<p><strong>Note: simple Web-based DS work</strong></p>\n<p>Client-server</p>\n<ul>\n<li>Clients: Generalized, large number, consumer of service</li>\n<li>Protocol: File retrievals, SQL, HTTP over TCP/IP</li>\n<li>Server: specialized, a provider of services (file services, db services, groupware services, web services)</li>\n<li>Naming, authentication, authorization, auditing and logging, billing</li>\n<li>Load balancing</li>\n</ul>\n<p>Difference between consistency and consensus</p>\n<p>Consistency means the content and time ordering should be consistent in different nodes, consensus means that different nodes share an agreement on certain protocol or value.</p>\n</blockquote>\n","excerpt":"<h2 id=\"DS-Concepts\"><a href=\"#DS-Concepts\" class=\"headerlink\" title=\"DS Concepts\"></a>DS Concepts</h2><ul>\n<li>A distributed system is one where several computations coordinate across machine boundaries<ul>\n<li>To coordinate, they must communicate, and must know of each other’s existence</li>\n<li>To coordinate, they must have common things (state) to “talk” about</li>\n</ul>\n</li>\n</ul>\n<hr>","more":"<h2 id=\"DS-Challenges\"><a href=\"#DS-Challenges\" class=\"headerlink\" title=\"DS Challenges\"></a>DS Challenges</h2><ol>\n<li>Global Resource Access</li>\n<li>Concurrency</li>\n<li>High Availability / Fault Tolerance (<strong>Inevitable</strong>)</li>\n<li>Transparency</li>\n<li>Management and Maintenance</li>\n<li>Security</li>\n<li>List item</li>\n<li>Scalability</li>\n<li>Timeliness (<strong>Intolerant</strong> for real-time system)</li>\n<li>Openness (Publishing key programming interfaces)</li>\n</ol>\n<blockquote>\n<p><strong>Note: simple Web-based DS work</strong></p>\n<p>Client-server</p>\n<ul>\n<li>Clients: Generalized, large number, consumer of service</li>\n<li>Protocol: File retrievals, SQL, HTTP over TCP/IP</li>\n<li>Server: specialized, a provider of services (file services, db services, groupware services, web services)</li>\n<li>Naming, authentication, authorization, auditing and logging, billing</li>\n<li>Load balancing</li>\n</ul>\n<p>Difference between consistency and consensus</p>\n<p>Consistency means the content and time ordering should be consistent in different nodes, consensus means that different nodes share an agreement on certain protocol or value.</p>\n</blockquote>"},{"title":"File System","date":"2016-05-16T06:40:00.000Z","description":"This time we talk about file system. First we compare the main and true difference between file system and database. Then we briefly introduce NFS and AFS, and talk about GFS based on one of Jeff Dean's famous papers.","_content":"\n**File System vs. database**\n---\nThe true difference between file system and database is naming and encapsulation. Besides, files are more easy to make, more flexible to use.\n\nIf the searchtousage ratio is low and the temporal locality is high, then file system is recommended. Otherwise database is recommended.\n\nP.S. The architecture is another difference.\n\n> **Notes: Properties of DFS**\n> - Persistence\n> - Use same interface as local files\n> - Allow for sharing\n\n----------\n**Mechanism for Distributed System**\n---\n**Caching**\n\nDS caching cares about data (files), metadata (information about data), location info, etc. \n\n**Mount Points**\n\nMount points is a Natural mechanism to use when mounted subtrees and remote file directories.\n\nDesigning DFS mapping: File name -> File id -> file\n\n----------\n**Network File System**\n---\nNFS is designed for stateless server, client-server architecture communicates between each other through RPC. Pathname cannot be interpreted at server.\n\nNFS cache is just like local file system cache.\n\n----------\n**Andrew File System**\n---\nIt is originally designed to support campus-wide sharing. The most important factor is scalability. There are several assumptions:\n\n1. Files are usually small, mostly less then 10 KB;\n2. Reading is 6 times more than Writing;\n3. Sequential access is common;\n4. Most files are written/read by only one single user.\n\nThe design strategy abstract could be described as: whole file caching, whole file serving, Unix API provided.\n\n----------\n**Google File System**\n---\n[GFS](http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf) is designed to share large data (files) among large number of users, the paper illustrates lots of details about GFS properties. Basically,\n\nGFS client sends a searching request to GFS master. Within GFS master stores the file namespace, which is in another way, metadata. The GFS master won't store much detailed information, and we must minimize its **involvement** in reads and writes so that it does not become a bottleneck. **Client never reads and writes data through the master. Instead, it asks the master which chunkservers it should contact**. Caching (in client) is necessary.\n\nWhen client gets the chunk locations, it directly reaches out to the closest chunk replica, and fetches data back from them. Chunk size have been chosen as 64MB. It is designed like that because: \n\n1.  It reduces clients’ need to interact with the master because reads and writes on the same chunk require only one initial request to the master for chunk location information.\n2.  Since on a large chunk, a client is more likely to perform many operations on a given chunk, it can reduce network overhead by keeping a persistent TCP connection to the chunk server over an extended period of time.\n3.  It reduces the size of the metadata stored on the master.\n\n\nTo be clear, metadata is stored in memory of master. **Chunk servers need not cache data**, because chunks are stored as local files and so Linux's buffer cache already keeps frequently accessed data in memory.\n\nWhen client tries to reach replicas: \n\n1. Client pushes data to all the replicas (first to the closest replica, then to all the others). By decoupling the data flow from the control flow, we can improve performance by scheduling expensive data based on network topology.\n2. Once all replicas receive the data, the client sends a write request to the primary replica, which assigns the task to other replicas. After receiving ACK from other replicas, primary replica sends ACK or any errors back to the client.\n(Default chunk replication is three)\n\n","source":"_posts/File_System.md","raw":"---\ntitle: File System\ndate: 2016-05-16 14:40:00\ncategory: DS_Notes\ntags: Distributed_System\ndescription: This time we talk about file system. First we compare the main and true difference between file system and database. Then we briefly introduce NFS and AFS, and talk about GFS based on one of Jeff Dean's famous papers.\n---\n\n**File System vs. database**\n---\nThe true difference between file system and database is naming and encapsulation. Besides, files are more easy to make, more flexible to use.\n\nIf the searchtousage ratio is low and the temporal locality is high, then file system is recommended. Otherwise database is recommended.\n\nP.S. The architecture is another difference.\n\n> **Notes: Properties of DFS**\n> - Persistence\n> - Use same interface as local files\n> - Allow for sharing\n\n----------\n**Mechanism for Distributed System**\n---\n**Caching**\n\nDS caching cares about data (files), metadata (information about data), location info, etc. \n\n**Mount Points**\n\nMount points is a Natural mechanism to use when mounted subtrees and remote file directories.\n\nDesigning DFS mapping: File name -> File id -> file\n\n----------\n**Network File System**\n---\nNFS is designed for stateless server, client-server architecture communicates between each other through RPC. Pathname cannot be interpreted at server.\n\nNFS cache is just like local file system cache.\n\n----------\n**Andrew File System**\n---\nIt is originally designed to support campus-wide sharing. The most important factor is scalability. There are several assumptions:\n\n1. Files are usually small, mostly less then 10 KB;\n2. Reading is 6 times more than Writing;\n3. Sequential access is common;\n4. Most files are written/read by only one single user.\n\nThe design strategy abstract could be described as: whole file caching, whole file serving, Unix API provided.\n\n----------\n**Google File System**\n---\n[GFS](http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf) is designed to share large data (files) among large number of users, the paper illustrates lots of details about GFS properties. Basically,\n\nGFS client sends a searching request to GFS master. Within GFS master stores the file namespace, which is in another way, metadata. The GFS master won't store much detailed information, and we must minimize its **involvement** in reads and writes so that it does not become a bottleneck. **Client never reads and writes data through the master. Instead, it asks the master which chunkservers it should contact**. Caching (in client) is necessary.\n\nWhen client gets the chunk locations, it directly reaches out to the closest chunk replica, and fetches data back from them. Chunk size have been chosen as 64MB. It is designed like that because: \n\n1.  It reduces clients’ need to interact with the master because reads and writes on the same chunk require only one initial request to the master for chunk location information.\n2.  Since on a large chunk, a client is more likely to perform many operations on a given chunk, it can reduce network overhead by keeping a persistent TCP connection to the chunk server over an extended period of time.\n3.  It reduces the size of the metadata stored on the master.\n\n\nTo be clear, metadata is stored in memory of master. **Chunk servers need not cache data**, because chunks are stored as local files and so Linux's buffer cache already keeps frequently accessed data in memory.\n\nWhen client tries to reach replicas: \n\n1. Client pushes data to all the replicas (first to the closest replica, then to all the others). By decoupling the data flow from the control flow, we can improve performance by scheduling expensive data based on network topology.\n2. Once all replicas receive the data, the client sends a write request to the primary replica, which assigns the task to other replicas. After receiving ACK from other replicas, primary replica sends ACK or any errors back to the client.\n(Default chunk replication is three)\n\n","slug":"File_System","published":1,"updated":"2016-05-16T21:40:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdrc0007sss27dy3uj5a","content":"<h2 id=\"File-System-vs-database\"><a href=\"#File-System-vs-database\" class=\"headerlink\" title=\"File System vs. database\"></a><strong>File System vs. database</strong></h2><p>The true difference between file system and database is naming and encapsulation. Besides, files are more easy to make, more flexible to use.</p>\n<p>If the searchtousage ratio is low and the temporal locality is high, then file system is recommended. Otherwise database is recommended.</p>\n<p>P.S. The architecture is another difference.</p>\n<blockquote>\n<p><strong>Notes: Properties of DFS</strong></p>\n<ul>\n<li>Persistence</li>\n<li>Use same interface as local files</li>\n<li>Allow for sharing</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"Mechanism-for-Distributed-System\"><a href=\"#Mechanism-for-Distributed-System\" class=\"headerlink\" title=\"Mechanism for Distributed System\"></a><strong>Mechanism for Distributed System</strong></h2><p><strong>Caching</strong></p>\n<p>DS caching cares about data (files), metadata (information about data), location info, etc. </p>\n<p><strong>Mount Points</strong></p>\n<p>Mount points is a Natural mechanism to use when mounted subtrees and remote file directories.</p>\n<p>Designing DFS mapping: File name -&gt; File id -&gt; file</p>\n<hr>\n<h2 id=\"Network-File-System\"><a href=\"#Network-File-System\" class=\"headerlink\" title=\"Network File System\"></a><strong>Network File System</strong></h2><p>NFS is designed for stateless server, client-server architecture communicates between each other through RPC. Pathname cannot be interpreted at server.</p>\n<p>NFS cache is just like local file system cache.</p>\n<hr>\n<h2 id=\"Andrew-File-System\"><a href=\"#Andrew-File-System\" class=\"headerlink\" title=\"Andrew File System\"></a><strong>Andrew File System</strong></h2><p>It is originally designed to support campus-wide sharing. The most important factor is scalability. There are several assumptions:</p>\n<ol>\n<li>Files are usually small, mostly less then 10 KB;</li>\n<li>Reading is 6 times more than Writing;</li>\n<li>Sequential access is common;</li>\n<li>Most files are written/read by only one single user.</li>\n</ol>\n<p>The design strategy abstract could be described as: whole file caching, whole file serving, Unix API provided.</p>\n<hr>\n<h2 id=\"Google-File-System\"><a href=\"#Google-File-System\" class=\"headerlink\" title=\"Google File System\"></a><strong>Google File System</strong></h2><p><a href=\"http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf\" target=\"_blank\" rel=\"external\">GFS</a> is designed to share large data (files) among large number of users, the paper illustrates lots of details about GFS properties. Basically,</p>\n<p>GFS client sends a searching request to GFS master. Within GFS master stores the file namespace, which is in another way, metadata. The GFS master won’t store much detailed information, and we must minimize its <strong>involvement</strong> in reads and writes so that it does not become a bottleneck. <strong>Client never reads and writes data through the master. Instead, it asks the master which chunkservers it should contact</strong>. Caching (in client) is necessary.</p>\n<p>When client gets the chunk locations, it directly reaches out to the closest chunk replica, and fetches data back from them. Chunk size have been chosen as 64MB. It is designed like that because: </p>\n<ol>\n<li>It reduces clients’ need to interact with the master because reads and writes on the same chunk require only one initial request to the master for chunk location information.</li>\n<li>Since on a large chunk, a client is more likely to perform many operations on a given chunk, it can reduce network overhead by keeping a persistent TCP connection to the chunk server over an extended period of time.</li>\n<li>It reduces the size of the metadata stored on the master.</li>\n</ol>\n<p>To be clear, metadata is stored in memory of master. <strong>Chunk servers need not cache data</strong>, because chunks are stored as local files and so Linux’s buffer cache already keeps frequently accessed data in memory.</p>\n<p>When client tries to reach replicas: </p>\n<ol>\n<li>Client pushes data to all the replicas (first to the closest replica, then to all the others). By decoupling the data flow from the control flow, we can improve performance by scheduling expensive data based on network topology.</li>\n<li>Once all replicas receive the data, the client sends a write request to the primary replica, which assigns the task to other replicas. After receiving ACK from other replicas, primary replica sends ACK or any errors back to the client.<br>(Default chunk replication is three)</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"File-System-vs-database\"><a href=\"#File-System-vs-database\" class=\"headerlink\" title=\"File System vs. database\"></a><strong>File System vs. database</strong></h2><p>The true difference between file system and database is naming and encapsulation. Besides, files are more easy to make, more flexible to use.</p>\n<p>If the searchtousage ratio is low and the temporal locality is high, then file system is recommended. Otherwise database is recommended.</p>\n<p>P.S. The architecture is another difference.</p>\n<blockquote>\n<p><strong>Notes: Properties of DFS</strong></p>\n<ul>\n<li>Persistence</li>\n<li>Use same interface as local files</li>\n<li>Allow for sharing</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"Mechanism-for-Distributed-System\"><a href=\"#Mechanism-for-Distributed-System\" class=\"headerlink\" title=\"Mechanism for Distributed System\"></a><strong>Mechanism for Distributed System</strong></h2><p><strong>Caching</strong></p>\n<p>DS caching cares about data (files), metadata (information about data), location info, etc. </p>\n<p><strong>Mount Points</strong></p>\n<p>Mount points is a Natural mechanism to use when mounted subtrees and remote file directories.</p>\n<p>Designing DFS mapping: File name -&gt; File id -&gt; file</p>\n<hr>\n<h2 id=\"Network-File-System\"><a href=\"#Network-File-System\" class=\"headerlink\" title=\"Network File System\"></a><strong>Network File System</strong></h2><p>NFS is designed for stateless server, client-server architecture communicates between each other through RPC. Pathname cannot be interpreted at server.</p>\n<p>NFS cache is just like local file system cache.</p>\n<hr>\n<h2 id=\"Andrew-File-System\"><a href=\"#Andrew-File-System\" class=\"headerlink\" title=\"Andrew File System\"></a><strong>Andrew File System</strong></h2><p>It is originally designed to support campus-wide sharing. The most important factor is scalability. There are several assumptions:</p>\n<ol>\n<li>Files are usually small, mostly less then 10 KB;</li>\n<li>Reading is 6 times more than Writing;</li>\n<li>Sequential access is common;</li>\n<li>Most files are written/read by only one single user.</li>\n</ol>\n<p>The design strategy abstract could be described as: whole file caching, whole file serving, Unix API provided.</p>\n<hr>\n<h2 id=\"Google-File-System\"><a href=\"#Google-File-System\" class=\"headerlink\" title=\"Google File System\"></a><strong>Google File System</strong></h2><p><a href=\"http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf\">GFS</a> is designed to share large data (files) among large number of users, the paper illustrates lots of details about GFS properties. Basically,</p>\n<p>GFS client sends a searching request to GFS master. Within GFS master stores the file namespace, which is in another way, metadata. The GFS master won’t store much detailed information, and we must minimize its <strong>involvement</strong> in reads and writes so that it does not become a bottleneck. <strong>Client never reads and writes data through the master. Instead, it asks the master which chunkservers it should contact</strong>. Caching (in client) is necessary.</p>\n<p>When client gets the chunk locations, it directly reaches out to the closest chunk replica, and fetches data back from them. Chunk size have been chosen as 64MB. It is designed like that because: </p>\n<ol>\n<li>It reduces clients’ need to interact with the master because reads and writes on the same chunk require only one initial request to the master for chunk location information.</li>\n<li>Since on a large chunk, a client is more likely to perform many operations on a given chunk, it can reduce network overhead by keeping a persistent TCP connection to the chunk server over an extended period of time.</li>\n<li>It reduces the size of the metadata stored on the master.</li>\n</ol>\n<p>To be clear, metadata is stored in memory of master. <strong>Chunk servers need not cache data</strong>, because chunks are stored as local files and so Linux’s buffer cache already keeps frequently accessed data in memory.</p>\n<p>When client tries to reach replicas: </p>\n<ol>\n<li>Client pushes data to all the replicas (first to the closest replica, then to all the others). By decoupling the data flow from the control flow, we can improve performance by scheduling expensive data based on network topology.</li>\n<li>Once all replicas receive the data, the client sends a write request to the primary replica, which assigns the task to other replicas. After receiving ACK from other replicas, primary replica sends ACK or any errors back to the client.<br>(Default chunk replication is three)</li>\n</ol>\n"},{"title":"High Availability","date":"2016-05-16T06:30:00.000Z","_content":"\n**Concepts**\n---\n**Availability** means that machine/system runs continuously. Meanwhile the system would keep the maintenance outage under operator control, keep the costs low and keep the implementation overhead low.\nIf we define MTTF as Mean time to failure, and MTTR means Mean time to repair, availability is calculated as \nAv = MTTF/(MTTR + MTTF)\nThe closer Av is to one, the stronger availability system is.\n<!--more-->\n\n**Difference between failure, fault and error**\n\n - **Failure**: Deviation from specified behavior\n - **Error**: Leading a wrong result\n - **Fault**: Something goes wrong at the lowest level\n\n**Crash failure** means a server halts, but it is working properly before until it halts.\n\n> **Notes: Difference between availability and fault tolerant**\n> Availability is about finding a **non-crashed source**\n> Fault tolerant is about finding the **correct answer**\n\n**Fault tolerant techniques**\n---\n1. TMR (Triple Modular Redundancy)\nThe method uses a **Voter** to collect data from different units, and gives the output which most units agree on. The technique requires that voter is much more reliable than the units, and correct units generate the same outputs. \nThe tradeoff of this architecture is that the system is too complicated and expensive.\n\n2. Master-Slave configuration\nMaster and slave node have the same input, slave would simulate the output of the master. When there's discrepancy between master and slave, both master and slave would shut down.\nThe tradeoff is that the architecture wont't tell that which one (slave or master) goes wrong.\n\n**Replication and consistency**\n---\n**Consistency** hereby means that any change to one replica must be reflected at all replicas.\nThe price of consistency is also obvious. When failure happens, performance costs, and even when there's no failure, performance also costs (e.g. too many replicas)\n**Generally, for a given performance level, higher availability can be arrived with weaker consistency.**","source":"_posts/High_Availability.md","raw":"---\ntitle: High Availability\ndate: 2016-05-16 14:30:00\ncategory: DS_Notes\ntags: Distributed_System\n---\n\n**Concepts**\n---\n**Availability** means that machine/system runs continuously. Meanwhile the system would keep the maintenance outage under operator control, keep the costs low and keep the implementation overhead low.\nIf we define MTTF as Mean time to failure, and MTTR means Mean time to repair, availability is calculated as \nAv = MTTF/(MTTR + MTTF)\nThe closer Av is to one, the stronger availability system is.\n<!--more-->\n\n**Difference between failure, fault and error**\n\n - **Failure**: Deviation from specified behavior\n - **Error**: Leading a wrong result\n - **Fault**: Something goes wrong at the lowest level\n\n**Crash failure** means a server halts, but it is working properly before until it halts.\n\n> **Notes: Difference between availability and fault tolerant**\n> Availability is about finding a **non-crashed source**\n> Fault tolerant is about finding the **correct answer**\n\n**Fault tolerant techniques**\n---\n1. TMR (Triple Modular Redundancy)\nThe method uses a **Voter** to collect data from different units, and gives the output which most units agree on. The technique requires that voter is much more reliable than the units, and correct units generate the same outputs. \nThe tradeoff of this architecture is that the system is too complicated and expensive.\n\n2. Master-Slave configuration\nMaster and slave node have the same input, slave would simulate the output of the master. When there's discrepancy between master and slave, both master and slave would shut down.\nThe tradeoff is that the architecture wont't tell that which one (slave or master) goes wrong.\n\n**Replication and consistency**\n---\n**Consistency** hereby means that any change to one replica must be reflected at all replicas.\nThe price of consistency is also obvious. When failure happens, performance costs, and even when there's no failure, performance also costs (e.g. too many replicas)\n**Generally, for a given performance level, higher availability can be arrived with weaker consistency.**","slug":"High_Availability","published":1,"updated":"2016-05-16T21:32:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdrg0009sss2w61xwkks","content":"<h2 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a><strong>Concepts</strong></h2><p><strong>Availability</strong> means that machine/system runs continuously. Meanwhile the system would keep the maintenance outage under operator control, keep the costs low and keep the implementation overhead low.<br>If we define MTTF as Mean time to failure, and MTTR means Mean time to repair, availability is calculated as<br>Av = MTTF/(MTTR + MTTF)<br>The closer Av is to one, the stronger availability system is.<br><a id=\"more\"></a></p>\n<p><strong>Difference between failure, fault and error</strong></p>\n<ul>\n<li><strong>Failure</strong>: Deviation from specified behavior</li>\n<li><strong>Error</strong>: Leading a wrong result</li>\n<li><strong>Fault</strong>: Something goes wrong at the lowest level</li>\n</ul>\n<p><strong>Crash failure</strong> means a server halts, but it is working properly before until it halts.</p>\n<blockquote>\n<p><strong>Notes: Difference between availability and fault tolerant</strong><br>Availability is about finding a <strong>non-crashed source</strong><br>Fault tolerant is about finding the <strong>correct answer</strong></p>\n</blockquote>\n<h2 id=\"Fault-tolerant-techniques\"><a href=\"#Fault-tolerant-techniques\" class=\"headerlink\" title=\"Fault tolerant techniques\"></a><strong>Fault tolerant techniques</strong></h2><ol>\n<li><p>TMR (Triple Modular Redundancy)<br>The method uses a <strong>Voter</strong> to collect data from different units, and gives the output which most units agree on. The technique requires that voter is much more reliable than the units, and correct units generate the same outputs.<br>The tradeoff of this architecture is that the system is too complicated and expensive.</p>\n</li>\n<li><p>Master-Slave configuration<br>Master and slave node have the same input, slave would simulate the output of the master. When there’s discrepancy between master and slave, both master and slave would shut down.<br>The tradeoff is that the architecture wont’t tell that which one (slave or master) goes wrong.</p>\n</li>\n</ol>\n<h2 id=\"Replication-and-consistency\"><a href=\"#Replication-and-consistency\" class=\"headerlink\" title=\"Replication and consistency\"></a><strong>Replication and consistency</strong></h2><p><strong>Consistency</strong> hereby means that any change to one replica must be reflected at all replicas.<br>The price of consistency is also obvious. When failure happens, performance costs, and even when there’s no failure, performance also costs (e.g. too many replicas)<br><strong>Generally, for a given performance level, higher availability can be arrived with weaker consistency.</strong></p>\n","excerpt":"<h2 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a><strong>Concepts</strong></h2><p><strong>Availability</strong> means that machine/system runs continuously. Meanwhile the system would keep the maintenance outage under operator control, keep the costs low and keep the implementation overhead low.<br>If we define MTTF as Mean time to failure, and MTTR means Mean time to repair, availability is calculated as<br>Av = MTTF/(MTTR + MTTF)<br>The closer Av is to one, the stronger availability system is.<br>","more":"</p>\n<p><strong>Difference between failure, fault and error</strong></p>\n<ul>\n<li><strong>Failure</strong>: Deviation from specified behavior</li>\n<li><strong>Error</strong>: Leading a wrong result</li>\n<li><strong>Fault</strong>: Something goes wrong at the lowest level</li>\n</ul>\n<p><strong>Crash failure</strong> means a server halts, but it is working properly before until it halts.</p>\n<blockquote>\n<p><strong>Notes: Difference between availability and fault tolerant</strong><br>Availability is about finding a <strong>non-crashed source</strong><br>Fault tolerant is about finding the <strong>correct answer</strong></p>\n</blockquote>\n<h2 id=\"Fault-tolerant-techniques\"><a href=\"#Fault-tolerant-techniques\" class=\"headerlink\" title=\"Fault tolerant techniques\"></a><strong>Fault tolerant techniques</strong></h2><ol>\n<li><p>TMR (Triple Modular Redundancy)<br>The method uses a <strong>Voter</strong> to collect data from different units, and gives the output which most units agree on. The technique requires that voter is much more reliable than the units, and correct units generate the same outputs.<br>The tradeoff of this architecture is that the system is too complicated and expensive.</p>\n</li>\n<li><p>Master-Slave configuration<br>Master and slave node have the same input, slave would simulate the output of the master. When there’s discrepancy between master and slave, both master and slave would shut down.<br>The tradeoff is that the architecture wont’t tell that which one (slave or master) goes wrong.</p>\n</li>\n</ol>\n<h2 id=\"Replication-and-consistency\"><a href=\"#Replication-and-consistency\" class=\"headerlink\" title=\"Replication and consistency\"></a><strong>Replication and consistency</strong></h2><p><strong>Consistency</strong> hereby means that any change to one replica must be reflected at all replicas.<br>The price of consistency is also obvious. When failure happens, performance costs, and even when there’s no failure, performance also costs (e.g. too many replicas)<br><strong>Generally, for a given performance level, higher availability can be arrived with weaker consistency.</strong></p>"},{"title":"Communication_and_Distributed_Objects","date":"2016-05-05T10:12:59.000Z","description":"This article mainly talks about two communication methods, message passing and RPC, and their main difference, and distributed objects","_content":"Features of various communication paradigms\n---\n\n**Message Passing**\n\n- Basic interprocess communication among distributed system. You need to konw 1) the message; 2) the name of source; 3) the destination process; 4) data type expected for process.\n\n- MP is performed using **send(receiver, message)** and **receive(sender, message)** primitives;\n\n- Pros and cons of non-blocking send() and receive(): **advantage** is that the CPU will not remain idle, **disadvantage** is that the sender process will never know whether its local process has been cleared or not.\n\n- Buffering: Buffering mainly deals with the embarrassed situation that when sender sends a message whose destination process is not initiated yet or not found by now. The buffered messages are buffered until the messages are ready to be processed.\n\n- In MP, the explicit movement of data is exposed\n\n**Remote Procedure Call**\n\n- Higher level of abstraction.\n\n- Message passing leaves the programmer with the burden of the explicit control of the movement of data. Remote procedure calls (RPC) relieves this burden by increasing the level of abstraction and providing semantics similar to a local procedure call.\n\n- RPC is performed using syntax **call procedure_name()**, **receive procedure_name()**, **reply(caller, result)**.\n\n- **Distributed Shared Memory**\n\n- Two resources for understanding: [slides](http://www.slideshare.net/SheriMeri/message-passing-remote-procedure-calls-and-distributed-shared-memory-as-communication-paradigms-for-distributed-systems-remote-procedure-call-implementation-using-distributed-algorithms), [Message Passing, Remote Procedure Calls and Distributed Shared Memory as Communication Paradigms for Distributed Systems](http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=3574842F26F1C9865BAC4204F5463D21?doi=10.1.1.95.2490&rep=rep1&type=pdf)\n\n\n> **Notes: Why not message passing but RPC?**\n> 1. Too explicit, though least abstract yet complicated for programmers, programmers should take care of all synchronization codes;\n> 2. Programmers may have to code format conversion, flow control and error handling;\n> 3. MP is I/O oriented, rather than request/result oriented. RPC hides all MP I/O from programmers. It looks like a procedures call -- which is actually invoking procedures on a server.\n\n----------\n\nSummary of [Birrel84. Implementing Remote Procedure Call]\n---\n\n**Goals of Implementing RPC**\n\n- Make distributed computation easier. Remove unnecessary difficulties, leaving only fundamental difficulties: timing, independent failure of component, and the coexistence of independent execution environments;\n\n- Make efficient RPC calls;\n\n- Make RPC semantics just like local procedure calls;\n\n- Provide secure RPC communication;\n\n- **Basic structure and transmitting process**\n\t1. The program structure is based on the concept of stubs;\n\t2. When the programmer wishes to make a remote procedure call, he makes a **normal local call**, and the local call will be automatically packed in the user-stub, and transmitted to the callee machine (remote machine) through **call procedure_name()** by RPCRuntime, the caller machine (client machine) would then be suspended;\n\t3. When the RPCRuntime in the Callee machine receives the packet,it would send the packet to the server-stub and unpack the packet, the server would do a **perfect local call** using the unpack arguments;\n\t4. After executing the data, the server would pack the results and send it back to the caller machine. Procedure here is similar as previous.\n\n**Binding**\n\n- Binding with whom? -> Naming\n\n- The semantics of an interface name are not dictated by the RPC package;\n\n- However the means by which an exporter uses the interface name to locate an exporter are dictated by the RPC package.\n\n- how to determine the machine address of the callee? -> Location\n\n- [Grapevine distributed database](https://users.soe.ucsc.edu/~sbrandt/221/Papers/Dist/schroeder-tocs84.pdf)\n\n**Complecated calls**\n\n- Reasonable strategy: Retransmitting\n\n- The caller periodically sends probes to the callee, to check if the callee has crashed or if there's some serious communication failure, and to notify the user of an exception. If there's acknowledgement feedback, then the server has no failures.\n\n- Retransmitting handles lost packets, long duration calls, and long gaps between calls.\n\n- Cons: only detects failure, not callee deadlocks; When there's long duration calls or large gaps between calls, message could be in big numbers.\n\n- **Alternative strategy**: to have the recipient of a packet spontaneously generate an acknowledgement if he doesn't generate the next packet significantly sooner than the expected retransmission interval. Like a heartbeat checking method.\n\nLimitation of RPC\n---\n\n- Pointer has no meaning when it refers to different machines, so no shared address space is a problem;\n\n- Binding data happens at run-time, which would consume time;\n\n- \"Interesting\" run-time errors may happen (dynamically linking errors);\n\n- Failure machines are independent, somewhere the communication can be transmitive;\n\n- Security issues;\n\n- Tough to do broadcast. To do broadcast thing in RPC you should do multiple RPCs based on the number of remote machines you want to communicate with.\n\n---\n\nDistributed Objects\n---\nDistributed Objects are layers between OS and application, it hides the OS and network stack, solves and extends RPC.\n\nCORBA (Common Object Request Broker Architecture)\n---\n\n- CORBA is a standard DS mechanism, that makes building DS easier. ORB is a broker that helps figure out how senders match out to receivers.\n\n- CORBA is language and location transparent, which means you can write it in any languages and the client and server don't know each others' locations.\n\n- They use a GIOP (General Inter-ORB Protocol) common communication protocol to talk to each other in different OS and different machines.\n\n","source":"_posts/Communication-and-Distributed-Objects.md","raw":"---\ntitle: Communication_and_Distributed_Objects\ndate: 2016-05-05 18:12:59\ncategory: DS_Notes\ntags: Distributed_System\ndescription: This article mainly talks about two communication methods, message passing and RPC, and their main difference, and distributed objects\n---\nFeatures of various communication paradigms\n---\n\n**Message Passing**\n\n- Basic interprocess communication among distributed system. You need to konw 1) the message; 2) the name of source; 3) the destination process; 4) data type expected for process.\n\n- MP is performed using **send(receiver, message)** and **receive(sender, message)** primitives;\n\n- Pros and cons of non-blocking send() and receive(): **advantage** is that the CPU will not remain idle, **disadvantage** is that the sender process will never know whether its local process has been cleared or not.\n\n- Buffering: Buffering mainly deals with the embarrassed situation that when sender sends a message whose destination process is not initiated yet or not found by now. The buffered messages are buffered until the messages are ready to be processed.\n\n- In MP, the explicit movement of data is exposed\n\n**Remote Procedure Call**\n\n- Higher level of abstraction.\n\n- Message passing leaves the programmer with the burden of the explicit control of the movement of data. Remote procedure calls (RPC) relieves this burden by increasing the level of abstraction and providing semantics similar to a local procedure call.\n\n- RPC is performed using syntax **call procedure_name()**, **receive procedure_name()**, **reply(caller, result)**.\n\n- **Distributed Shared Memory**\n\n- Two resources for understanding: [slides](http://www.slideshare.net/SheriMeri/message-passing-remote-procedure-calls-and-distributed-shared-memory-as-communication-paradigms-for-distributed-systems-remote-procedure-call-implementation-using-distributed-algorithms), [Message Passing, Remote Procedure Calls and Distributed Shared Memory as Communication Paradigms for Distributed Systems](http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=3574842F26F1C9865BAC4204F5463D21?doi=10.1.1.95.2490&rep=rep1&type=pdf)\n\n\n> **Notes: Why not message passing but RPC?**\n> 1. Too explicit, though least abstract yet complicated for programmers, programmers should take care of all synchronization codes;\n> 2. Programmers may have to code format conversion, flow control and error handling;\n> 3. MP is I/O oriented, rather than request/result oriented. RPC hides all MP I/O from programmers. It looks like a procedures call -- which is actually invoking procedures on a server.\n\n----------\n\nSummary of [Birrel84. Implementing Remote Procedure Call]\n---\n\n**Goals of Implementing RPC**\n\n- Make distributed computation easier. Remove unnecessary difficulties, leaving only fundamental difficulties: timing, independent failure of component, and the coexistence of independent execution environments;\n\n- Make efficient RPC calls;\n\n- Make RPC semantics just like local procedure calls;\n\n- Provide secure RPC communication;\n\n- **Basic structure and transmitting process**\n\t1. The program structure is based on the concept of stubs;\n\t2. When the programmer wishes to make a remote procedure call, he makes a **normal local call**, and the local call will be automatically packed in the user-stub, and transmitted to the callee machine (remote machine) through **call procedure_name()** by RPCRuntime, the caller machine (client machine) would then be suspended;\n\t3. When the RPCRuntime in the Callee machine receives the packet,it would send the packet to the server-stub and unpack the packet, the server would do a **perfect local call** using the unpack arguments;\n\t4. After executing the data, the server would pack the results and send it back to the caller machine. Procedure here is similar as previous.\n\n**Binding**\n\n- Binding with whom? -> Naming\n\n- The semantics of an interface name are not dictated by the RPC package;\n\n- However the means by which an exporter uses the interface name to locate an exporter are dictated by the RPC package.\n\n- how to determine the machine address of the callee? -> Location\n\n- [Grapevine distributed database](https://users.soe.ucsc.edu/~sbrandt/221/Papers/Dist/schroeder-tocs84.pdf)\n\n**Complecated calls**\n\n- Reasonable strategy: Retransmitting\n\n- The caller periodically sends probes to the callee, to check if the callee has crashed or if there's some serious communication failure, and to notify the user of an exception. If there's acknowledgement feedback, then the server has no failures.\n\n- Retransmitting handles lost packets, long duration calls, and long gaps between calls.\n\n- Cons: only detects failure, not callee deadlocks; When there's long duration calls or large gaps between calls, message could be in big numbers.\n\n- **Alternative strategy**: to have the recipient of a packet spontaneously generate an acknowledgement if he doesn't generate the next packet significantly sooner than the expected retransmission interval. Like a heartbeat checking method.\n\nLimitation of RPC\n---\n\n- Pointer has no meaning when it refers to different machines, so no shared address space is a problem;\n\n- Binding data happens at run-time, which would consume time;\n\n- \"Interesting\" run-time errors may happen (dynamically linking errors);\n\n- Failure machines are independent, somewhere the communication can be transmitive;\n\n- Security issues;\n\n- Tough to do broadcast. To do broadcast thing in RPC you should do multiple RPCs based on the number of remote machines you want to communicate with.\n\n---\n\nDistributed Objects\n---\nDistributed Objects are layers between OS and application, it hides the OS and network stack, solves and extends RPC.\n\nCORBA (Common Object Request Broker Architecture)\n---\n\n- CORBA is a standard DS mechanism, that makes building DS easier. ORB is a broker that helps figure out how senders match out to receivers.\n\n- CORBA is language and location transparent, which means you can write it in any languages and the client and server don't know each others' locations.\n\n- They use a GIOP (General Inter-ORB Protocol) common communication protocol to talk to each other in different OS and different machines.\n\n","slug":"Communication-and-Distributed-Objects","published":1,"updated":"2016-05-05T10:23:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdro000bsss2f37i1ob3","content":"<h2 id=\"Features-of-various-communication-paradigms\"><a href=\"#Features-of-various-communication-paradigms\" class=\"headerlink\" title=\"Features of various communication paradigms\"></a>Features of various communication paradigms</h2><p><strong>Message Passing</strong></p>\n<ul>\n<li><p>Basic interprocess communication among distributed system. You need to konw 1) the message; 2) the name of source; 3) the destination process; 4) data type expected for process.</p>\n</li>\n<li><p>MP is performed using <strong>send(receiver, message)</strong> and <strong>receive(sender, message)</strong> primitives;</p>\n</li>\n<li><p>Pros and cons of non-blocking send() and receive(): <strong>advantage</strong> is that the CPU will not remain idle, <strong>disadvantage</strong> is that the sender process will never know whether its local process has been cleared or not.</p>\n</li>\n<li><p>Buffering: Buffering mainly deals with the embarrassed situation that when sender sends a message whose destination process is not initiated yet or not found by now. The buffered messages are buffered until the messages are ready to be processed.</p>\n</li>\n<li><p>In MP, the explicit movement of data is exposed</p>\n</li>\n</ul>\n<p><strong>Remote Procedure Call</strong></p>\n<ul>\n<li><p>Higher level of abstraction.</p>\n</li>\n<li><p>Message passing leaves the programmer with the burden of the explicit control of the movement of data. Remote procedure calls (RPC) relieves this burden by increasing the level of abstraction and providing semantics similar to a local procedure call.</p>\n</li>\n<li><p>RPC is performed using syntax <strong>call procedure_name()</strong>, <strong>receive procedure_name()</strong>, <strong>reply(caller, result)</strong>.</p>\n</li>\n<li><p><strong>Distributed Shared Memory</strong></p>\n</li>\n<li><p>Two resources for understanding: <a href=\"http://www.slideshare.net/SheriMeri/message-passing-remote-procedure-calls-and-distributed-shared-memory-as-communication-paradigms-for-distributed-systems-remote-procedure-call-implementation-using-distributed-algorithms\" target=\"_blank\" rel=\"external\">slides</a>, <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=3574842F26F1C9865BAC4204F5463D21?doi=10.1.1.95.2490&amp;rep=rep1&amp;type=pdf\" target=\"_blank\" rel=\"external\">Message Passing, Remote Procedure Calls and Distributed Shared Memory as Communication Paradigms for Distributed Systems</a></p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Notes: Why not message passing but RPC?</strong></p>\n<ol>\n<li>Too explicit, though least abstract yet complicated for programmers, programmers should take care of all synchronization codes;</li>\n<li>Programmers may have to code format conversion, flow control and error handling;</li>\n<li>MP is I/O oriented, rather than request/result oriented. RPC hides all MP I/O from programmers. It looks like a procedures call – which is actually invoking procedures on a server.</li>\n</ol>\n</blockquote>\n<hr>\n<h2 id=\"Summary-of-Birrel84-Implementing-Remote-Procedure-Call\"><a href=\"#Summary-of-Birrel84-Implementing-Remote-Procedure-Call\" class=\"headerlink\" title=\"Summary of [Birrel84. Implementing Remote Procedure Call]\"></a>Summary of [Birrel84. Implementing Remote Procedure Call]</h2><p><strong>Goals of Implementing RPC</strong></p>\n<ul>\n<li><p>Make distributed computation easier. Remove unnecessary difficulties, leaving only fundamental difficulties: timing, independent failure of component, and the coexistence of independent execution environments;</p>\n</li>\n<li><p>Make efficient RPC calls;</p>\n</li>\n<li><p>Make RPC semantics just like local procedure calls;</p>\n</li>\n<li><p>Provide secure RPC communication;</p>\n</li>\n<li><p><strong>Basic structure and transmitting process</strong></p>\n<ol>\n<li>The program structure is based on the concept of stubs;</li>\n<li>When the programmer wishes to make a remote procedure call, he makes a <strong>normal local call</strong>, and the local call will be automatically packed in the user-stub, and transmitted to the callee machine (remote machine) through <strong>call procedure_name()</strong> by RPCRuntime, the caller machine (client machine) would then be suspended;</li>\n<li>When the RPCRuntime in the Callee machine receives the packet,it would send the packet to the server-stub and unpack the packet, the server would do a <strong>perfect local call</strong> using the unpack arguments;</li>\n<li>After executing the data, the server would pack the results and send it back to the caller machine. Procedure here is similar as previous.</li>\n</ol>\n</li>\n</ul>\n<p><strong>Binding</strong></p>\n<ul>\n<li><p>Binding with whom? -&gt; Naming</p>\n</li>\n<li><p>The semantics of an interface name are not dictated by the RPC package;</p>\n</li>\n<li><p>However the means by which an exporter uses the interface name to locate an exporter are dictated by the RPC package.</p>\n</li>\n<li><p>how to determine the machine address of the callee? -&gt; Location</p>\n</li>\n<li><p><a href=\"https://users.soe.ucsc.edu/~sbrandt/221/Papers/Dist/schroeder-tocs84.pdf\" target=\"_blank\" rel=\"external\">Grapevine distributed database</a></p>\n</li>\n</ul>\n<p><strong>Complecated calls</strong></p>\n<ul>\n<li><p>Reasonable strategy: Retransmitting</p>\n</li>\n<li><p>The caller periodically sends probes to the callee, to check if the callee has crashed or if there’s some serious communication failure, and to notify the user of an exception. If there’s acknowledgement feedback, then the server has no failures.</p>\n</li>\n<li><p>Retransmitting handles lost packets, long duration calls, and long gaps between calls.</p>\n</li>\n<li><p>Cons: only detects failure, not callee deadlocks; When there’s long duration calls or large gaps between calls, message could be in big numbers.</p>\n</li>\n<li><p><strong>Alternative strategy</strong>: to have the recipient of a packet spontaneously generate an acknowledgement if he doesn’t generate the next packet significantly sooner than the expected retransmission interval. Like a heartbeat checking method.</p>\n</li>\n</ul>\n<h2 id=\"Limitation-of-RPC\"><a href=\"#Limitation-of-RPC\" class=\"headerlink\" title=\"Limitation of RPC\"></a>Limitation of RPC</h2><ul>\n<li><p>Pointer has no meaning when it refers to different machines, so no shared address space is a problem;</p>\n</li>\n<li><p>Binding data happens at run-time, which would consume time;</p>\n</li>\n<li><p>“Interesting” run-time errors may happen (dynamically linking errors);</p>\n</li>\n<li><p>Failure machines are independent, somewhere the communication can be transmitive;</p>\n</li>\n<li><p>Security issues;</p>\n</li>\n<li><p>Tough to do broadcast. To do broadcast thing in RPC you should do multiple RPCs based on the number of remote machines you want to communicate with.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Distributed-Objects\"><a href=\"#Distributed-Objects\" class=\"headerlink\" title=\"Distributed Objects\"></a>Distributed Objects</h2><p>Distributed Objects are layers between OS and application, it hides the OS and network stack, solves and extends RPC.</p>\n<h2 id=\"CORBA-Common-Object-Request-Broker-Architecture\"><a href=\"#CORBA-Common-Object-Request-Broker-Architecture\" class=\"headerlink\" title=\"CORBA (Common Object Request Broker Architecture)\"></a>CORBA (Common Object Request Broker Architecture)</h2><ul>\n<li><p>CORBA is a standard DS mechanism, that makes building DS easier. ORB is a broker that helps figure out how senders match out to receivers.</p>\n</li>\n<li><p>CORBA is language and location transparent, which means you can write it in any languages and the client and server don’t know each others’ locations.</p>\n</li>\n<li><p>They use a GIOP (General Inter-ORB Protocol) common communication protocol to talk to each other in different OS and different machines.</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Features-of-various-communication-paradigms\"><a href=\"#Features-of-various-communication-paradigms\" class=\"headerlink\" title=\"Features of various communication paradigms\"></a>Features of various communication paradigms</h2><p><strong>Message Passing</strong></p>\n<ul>\n<li><p>Basic interprocess communication among distributed system. You need to konw 1) the message; 2) the name of source; 3) the destination process; 4) data type expected for process.</p>\n</li>\n<li><p>MP is performed using <strong>send(receiver, message)</strong> and <strong>receive(sender, message)</strong> primitives;</p>\n</li>\n<li><p>Pros and cons of non-blocking send() and receive(): <strong>advantage</strong> is that the CPU will not remain idle, <strong>disadvantage</strong> is that the sender process will never know whether its local process has been cleared or not.</p>\n</li>\n<li><p>Buffering: Buffering mainly deals with the embarrassed situation that when sender sends a message whose destination process is not initiated yet or not found by now. The buffered messages are buffered until the messages are ready to be processed.</p>\n</li>\n<li><p>In MP, the explicit movement of data is exposed</p>\n</li>\n</ul>\n<p><strong>Remote Procedure Call</strong></p>\n<ul>\n<li><p>Higher level of abstraction.</p>\n</li>\n<li><p>Message passing leaves the programmer with the burden of the explicit control of the movement of data. Remote procedure calls (RPC) relieves this burden by increasing the level of abstraction and providing semantics similar to a local procedure call.</p>\n</li>\n<li><p>RPC is performed using syntax <strong>call procedure_name()</strong>, <strong>receive procedure_name()</strong>, <strong>reply(caller, result)</strong>.</p>\n</li>\n<li><p><strong>Distributed Shared Memory</strong></p>\n</li>\n<li><p>Two resources for understanding: <a href=\"http://www.slideshare.net/SheriMeri/message-passing-remote-procedure-calls-and-distributed-shared-memory-as-communication-paradigms-for-distributed-systems-remote-procedure-call-implementation-using-distributed-algorithms\">slides</a>, <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=3574842F26F1C9865BAC4204F5463D21?doi=10.1.1.95.2490&amp;rep=rep1&amp;type=pdf\">Message Passing, Remote Procedure Calls and Distributed Shared Memory as Communication Paradigms for Distributed Systems</a></p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Notes: Why not message passing but RPC?</strong></p>\n<ol>\n<li>Too explicit, though least abstract yet complicated for programmers, programmers should take care of all synchronization codes;</li>\n<li>Programmers may have to code format conversion, flow control and error handling;</li>\n<li>MP is I/O oriented, rather than request/result oriented. RPC hides all MP I/O from programmers. It looks like a procedures call – which is actually invoking procedures on a server.</li>\n</ol>\n</blockquote>\n<hr>\n<h2 id=\"Summary-of-Birrel84-Implementing-Remote-Procedure-Call\"><a href=\"#Summary-of-Birrel84-Implementing-Remote-Procedure-Call\" class=\"headerlink\" title=\"Summary of [Birrel84. Implementing Remote Procedure Call]\"></a>Summary of [Birrel84. Implementing Remote Procedure Call]</h2><p><strong>Goals of Implementing RPC</strong></p>\n<ul>\n<li><p>Make distributed computation easier. Remove unnecessary difficulties, leaving only fundamental difficulties: timing, independent failure of component, and the coexistence of independent execution environments;</p>\n</li>\n<li><p>Make efficient RPC calls;</p>\n</li>\n<li><p>Make RPC semantics just like local procedure calls;</p>\n</li>\n<li><p>Provide secure RPC communication;</p>\n</li>\n<li><p><strong>Basic structure and transmitting process</strong></p>\n<ol>\n<li>The program structure is based on the concept of stubs;</li>\n<li>When the programmer wishes to make a remote procedure call, he makes a <strong>normal local call</strong>, and the local call will be automatically packed in the user-stub, and transmitted to the callee machine (remote machine) through <strong>call procedure_name()</strong> by RPCRuntime, the caller machine (client machine) would then be suspended;</li>\n<li>When the RPCRuntime in the Callee machine receives the packet,it would send the packet to the server-stub and unpack the packet, the server would do a <strong>perfect local call</strong> using the unpack arguments;</li>\n<li>After executing the data, the server would pack the results and send it back to the caller machine. Procedure here is similar as previous.</li>\n</ol>\n</li>\n</ul>\n<p><strong>Binding</strong></p>\n<ul>\n<li><p>Binding with whom? -&gt; Naming</p>\n</li>\n<li><p>The semantics of an interface name are not dictated by the RPC package;</p>\n</li>\n<li><p>However the means by which an exporter uses the interface name to locate an exporter are dictated by the RPC package.</p>\n</li>\n<li><p>how to determine the machine address of the callee? -&gt; Location</p>\n</li>\n<li><p><a href=\"https://users.soe.ucsc.edu/~sbrandt/221/Papers/Dist/schroeder-tocs84.pdf\">Grapevine distributed database</a></p>\n</li>\n</ul>\n<p><strong>Complecated calls</strong></p>\n<ul>\n<li><p>Reasonable strategy: Retransmitting</p>\n</li>\n<li><p>The caller periodically sends probes to the callee, to check if the callee has crashed or if there’s some serious communication failure, and to notify the user of an exception. If there’s acknowledgement feedback, then the server has no failures.</p>\n</li>\n<li><p>Retransmitting handles lost packets, long duration calls, and long gaps between calls.</p>\n</li>\n<li><p>Cons: only detects failure, not callee deadlocks; When there’s long duration calls or large gaps between calls, message could be in big numbers.</p>\n</li>\n<li><p><strong>Alternative strategy</strong>: to have the recipient of a packet spontaneously generate an acknowledgement if he doesn’t generate the next packet significantly sooner than the expected retransmission interval. Like a heartbeat checking method.</p>\n</li>\n</ul>\n<h2 id=\"Limitation-of-RPC\"><a href=\"#Limitation-of-RPC\" class=\"headerlink\" title=\"Limitation of RPC\"></a>Limitation of RPC</h2><ul>\n<li><p>Pointer has no meaning when it refers to different machines, so no shared address space is a problem;</p>\n</li>\n<li><p>Binding data happens at run-time, which would consume time;</p>\n</li>\n<li><p>“Interesting” run-time errors may happen (dynamically linking errors);</p>\n</li>\n<li><p>Failure machines are independent, somewhere the communication can be transmitive;</p>\n</li>\n<li><p>Security issues;</p>\n</li>\n<li><p>Tough to do broadcast. To do broadcast thing in RPC you should do multiple RPCs based on the number of remote machines you want to communicate with.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Distributed-Objects\"><a href=\"#Distributed-Objects\" class=\"headerlink\" title=\"Distributed Objects\"></a>Distributed Objects</h2><p>Distributed Objects are layers between OS and application, it hides the OS and network stack, solves and extends RPC.</p>\n<h2 id=\"CORBA-Common-Object-Request-Broker-Architecture\"><a href=\"#CORBA-Common-Object-Request-Broker-Architecture\" class=\"headerlink\" title=\"CORBA (Common Object Request Broker Architecture)\"></a>CORBA (Common Object Request Broker Architecture)</h2><ul>\n<li><p>CORBA is a standard DS mechanism, that makes building DS easier. ORB is a broker that helps figure out how senders match out to receivers.</p>\n</li>\n<li><p>CORBA is language and location transparent, which means you can write it in any languages and the client and server don’t know each others’ locations.</p>\n</li>\n<li><p>They use a GIOP (General Inter-ORB Protocol) common communication protocol to talk to each other in different OS and different machines.</p>\n</li>\n</ul>\n"},{"title":"Load Balancing","date":"2016-05-16T06:41:00.000Z","_content":"Process scheduling means which process should work on which processor.\n\nLoad balancing is a strategy for how to do process scheduling. There are several policy that should be considered:\n\n1. **Transfer Policy**: Decide whether it has to be transferred?\n2. **Selection Policy**: Which process should I choose to make a move?\n3. **Location Policy**: How to choose source destination?\n\nIf we want to transfer a process from one processor (sender) to another processor (receiver), then the process must be initiated either by sender or by the receiver. \n<!--more-->\n\n----------\n**Sender-Initiate Algorithms**\n---\nThe load distribution facilitates migration from a **heavily-loaded** sender to a **lightly-loaded** receiver. So in that case, the algorithm is better used in a **lightly-loaded** system, because light processors are relatively easy to be found.\n\nA sender can use a transfer policy that initiates the algorithm when detecting its queue length exceeded a certain threshold upon the arrival of a new process. In that case, the sender would probe suitable receivers until it find one.\n\n----------\n**Receiver-Initiated Algorithm**\n---\nIt is reasonable to have a receiver-initiated algorithm since there's a sender-initiate algorithm. Similarly, the processor activates the pull operation when its queue length falls below a certain threshold. A lightly loaded processor pull from the heavily loaded sender.\n\nBased on that, the algorithm is better used in a **heavily loaded** system, where a sender can be found easily. \n\nThe receiver-initiated algorithm is more stable than the sender-initiated algorithm. That is because in low traffic system, although the migration initiation might be plenty, the degradation of performance due to the additional network traffic is not significant. \n\nCombination of sender-initiated algorithm and receiver-initiated algorithm seems logical. Each node may dynamically play the role of either sender or receiver. Probing thus becomes unnecessary.","source":"_posts/Load_Balancing.md","raw":"---\ntitle: Load Balancing\ndate: 2016-05-16 14:41:00\ncategory: DS_Notes\ntags: Distributed_System\n---\nProcess scheduling means which process should work on which processor.\n\nLoad balancing is a strategy for how to do process scheduling. There are several policy that should be considered:\n\n1. **Transfer Policy**: Decide whether it has to be transferred?\n2. **Selection Policy**: Which process should I choose to make a move?\n3. **Location Policy**: How to choose source destination?\n\nIf we want to transfer a process from one processor (sender) to another processor (receiver), then the process must be initiated either by sender or by the receiver. \n<!--more-->\n\n----------\n**Sender-Initiate Algorithms**\n---\nThe load distribution facilitates migration from a **heavily-loaded** sender to a **lightly-loaded** receiver. So in that case, the algorithm is better used in a **lightly-loaded** system, because light processors are relatively easy to be found.\n\nA sender can use a transfer policy that initiates the algorithm when detecting its queue length exceeded a certain threshold upon the arrival of a new process. In that case, the sender would probe suitable receivers until it find one.\n\n----------\n**Receiver-Initiated Algorithm**\n---\nIt is reasonable to have a receiver-initiated algorithm since there's a sender-initiate algorithm. Similarly, the processor activates the pull operation when its queue length falls below a certain threshold. A lightly loaded processor pull from the heavily loaded sender.\n\nBased on that, the algorithm is better used in a **heavily loaded** system, where a sender can be found easily. \n\nThe receiver-initiated algorithm is more stable than the sender-initiated algorithm. That is because in low traffic system, although the migration initiation might be plenty, the degradation of performance due to the additional network traffic is not significant. \n\nCombination of sender-initiated algorithm and receiver-initiated algorithm seems logical. Each node may dynamically play the role of either sender or receiver. Probing thus becomes unnecessary.","slug":"Load_Balancing","published":1,"updated":"2016-05-16T21:43:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdrt000esss2zg8qxs8g","content":"<p>Process scheduling means which process should work on which processor.</p>\n<p>Load balancing is a strategy for how to do process scheduling. There are several policy that should be considered:</p>\n<ol>\n<li><strong>Transfer Policy</strong>: Decide whether it has to be transferred?</li>\n<li><strong>Selection Policy</strong>: Which process should I choose to make a move?</li>\n<li><strong>Location Policy</strong>: How to choose source destination?</li>\n</ol>\n<p>If we want to transfer a process from one processor (sender) to another processor (receiver), then the process must be initiated either by sender or by the receiver.<br><a id=\"more\"></a></p>\n<hr>\n<h2 id=\"Sender-Initiate-Algorithms\"><a href=\"#Sender-Initiate-Algorithms\" class=\"headerlink\" title=\"Sender-Initiate Algorithms\"></a><strong>Sender-Initiate Algorithms</strong></h2><p>The load distribution facilitates migration from a <strong>heavily-loaded</strong> sender to a <strong>lightly-loaded</strong> receiver. So in that case, the algorithm is better used in a <strong>lightly-loaded</strong> system, because light processors are relatively easy to be found.</p>\n<p>A sender can use a transfer policy that initiates the algorithm when detecting its queue length exceeded a certain threshold upon the arrival of a new process. In that case, the sender would probe suitable receivers until it find one.</p>\n<hr>\n<h2 id=\"Receiver-Initiated-Algorithm\"><a href=\"#Receiver-Initiated-Algorithm\" class=\"headerlink\" title=\"Receiver-Initiated Algorithm\"></a><strong>Receiver-Initiated Algorithm</strong></h2><p>It is reasonable to have a receiver-initiated algorithm since there’s a sender-initiate algorithm. Similarly, the processor activates the pull operation when its queue length falls below a certain threshold. A lightly loaded processor pull from the heavily loaded sender.</p>\n<p>Based on that, the algorithm is better used in a <strong>heavily loaded</strong> system, where a sender can be found easily. </p>\n<p>The receiver-initiated algorithm is more stable than the sender-initiated algorithm. That is because in low traffic system, although the migration initiation might be plenty, the degradation of performance due to the additional network traffic is not significant. </p>\n<p>Combination of sender-initiated algorithm and receiver-initiated algorithm seems logical. Each node may dynamically play the role of either sender or receiver. Probing thus becomes unnecessary.</p>\n","excerpt":"<p>Process scheduling means which process should work on which processor.</p>\n<p>Load balancing is a strategy for how to do process scheduling. There are several policy that should be considered:</p>\n<ol>\n<li><strong>Transfer Policy</strong>: Decide whether it has to be transferred?</li>\n<li><strong>Selection Policy</strong>: Which process should I choose to make a move?</li>\n<li><strong>Location Policy</strong>: How to choose source destination?</li>\n</ol>\n<p>If we want to transfer a process from one processor (sender) to another processor (receiver), then the process must be initiated either by sender or by the receiver.<br>","more":"</p>\n<hr>\n<h2 id=\"Sender-Initiate-Algorithms\"><a href=\"#Sender-Initiate-Algorithms\" class=\"headerlink\" title=\"Sender-Initiate Algorithms\"></a><strong>Sender-Initiate Algorithms</strong></h2><p>The load distribution facilitates migration from a <strong>heavily-loaded</strong> sender to a <strong>lightly-loaded</strong> receiver. So in that case, the algorithm is better used in a <strong>lightly-loaded</strong> system, because light processors are relatively easy to be found.</p>\n<p>A sender can use a transfer policy that initiates the algorithm when detecting its queue length exceeded a certain threshold upon the arrival of a new process. In that case, the sender would probe suitable receivers until it find one.</p>\n<hr>\n<h2 id=\"Receiver-Initiated-Algorithm\"><a href=\"#Receiver-Initiated-Algorithm\" class=\"headerlink\" title=\"Receiver-Initiated Algorithm\"></a><strong>Receiver-Initiated Algorithm</strong></h2><p>It is reasonable to have a receiver-initiated algorithm since there’s a sender-initiate algorithm. Similarly, the processor activates the pull operation when its queue length falls below a certain threshold. A lightly loaded processor pull from the heavily loaded sender.</p>\n<p>Based on that, the algorithm is better used in a <strong>heavily loaded</strong> system, where a sender can be found easily. </p>\n<p>The receiver-initiated algorithm is more stable than the sender-initiated algorithm. That is because in low traffic system, although the migration initiation might be plenty, the degradation of performance due to the additional network traffic is not significant. </p>\n<p>Combination of sender-initiated algorithm and receiver-initiated algorithm seems logical. Each node may dynamically play the role of either sender or receiver. Probing thus becomes unnecessary.</p>"},{"title":"Global State","date":"2016-05-16T06:04:00.000Z","description":"In this topic, several concepts are introduced -- deadlock, consistent cut and snapshots","_content":"\n**Deadlock**\n---\nDeadlock occurs if the wait-for graph has a loop in it. If an observer wants to see the loop, he must have a consistent, global view of the entire system. Phantom deadlocks occurs when the latency in the system causes us to miss critical events.\n\n\n----------\n**Cut**\n---\nA cut slices through all event histories, and splits each process history into \"complete\" and \"future\".\nThe only thing that needs notice is that cut should be **inconsistent**. \n\n\n----------\n**Taking snapshots of system state**\n---\nChandy-Lamport Snapshot is a distributed algorithm to record a consistent global state for the system. It is extremely useful for analyzing stable properties.\n\n> **Notes: The algorithm**\n> The algorithm is divided into two parts: the Marker sending rule and the Marker receiving rule. The special marker message is to specify the state of the system. Every process records state locally.\n> \n> - Marker Sending Rule:\n> Process starts the algorithm by recording its state, and sends the marker message to every other process except itself\n> - Marker Receiving Rule:\n> There are two situations:\n> 1) If receiving process does not record its state, it will create an empty list for each process, then record the state following the received message. Finally send messages as the Marker Sending Rule.\n> 2) If has already recorded, then record the state associate with the sender process\n> - Non- Marker Receiving Rule:\n> the receiving process place the message at the end of the list.\n\nThe algorithm would probably not telling you some states (not recorded), and the final recorded state never is a global state. The final state would happen only if the first marker message is horizontal.\n\nThere are some observations about the algorithm: 1) The algorithm will definitely terminate; 2) The recorded state is a globally consistent state, but is not necessarily the system will actually occupied. **But it doesn't matter because no one will observe that anyway.** 3) Any stable properties that are true for the recorded state are also true for all post snapshot states\n\n\n----------\n**Distributed Debugging**\n---\nIf we list all the possible states (lattice), then we can test if some property is possibly true, by **finding a set of states that all linearization will pass through**\n","source":"_posts/Global_State.md","raw":"---\ntitle: Global State\ndate: 2016-05-16 14:04:00\ncategory: DS_Notes\ntags: Distributed_System\ndescription: In this topic, several concepts are introduced -- deadlock, consistent cut and snapshots\n---\n\n**Deadlock**\n---\nDeadlock occurs if the wait-for graph has a loop in it. If an observer wants to see the loop, he must have a consistent, global view of the entire system. Phantom deadlocks occurs when the latency in the system causes us to miss critical events.\n\n\n----------\n**Cut**\n---\nA cut slices through all event histories, and splits each process history into \"complete\" and \"future\".\nThe only thing that needs notice is that cut should be **inconsistent**. \n\n\n----------\n**Taking snapshots of system state**\n---\nChandy-Lamport Snapshot is a distributed algorithm to record a consistent global state for the system. It is extremely useful for analyzing stable properties.\n\n> **Notes: The algorithm**\n> The algorithm is divided into two parts: the Marker sending rule and the Marker receiving rule. The special marker message is to specify the state of the system. Every process records state locally.\n> \n> - Marker Sending Rule:\n> Process starts the algorithm by recording its state, and sends the marker message to every other process except itself\n> - Marker Receiving Rule:\n> There are two situations:\n> 1) If receiving process does not record its state, it will create an empty list for each process, then record the state following the received message. Finally send messages as the Marker Sending Rule.\n> 2) If has already recorded, then record the state associate with the sender process\n> - Non- Marker Receiving Rule:\n> the receiving process place the message at the end of the list.\n\nThe algorithm would probably not telling you some states (not recorded), and the final recorded state never is a global state. The final state would happen only if the first marker message is horizontal.\n\nThere are some observations about the algorithm: 1) The algorithm will definitely terminate; 2) The recorded state is a globally consistent state, but is not necessarily the system will actually occupied. **But it doesn't matter because no one will observe that anyway.** 3) Any stable properties that are true for the recorded state are also true for all post snapshot states\n\n\n----------\n**Distributed Debugging**\n---\nIf we list all the possible states (lattice), then we can test if some property is possibly true, by **finding a set of states that all linearization will pass through**\n","slug":"Global_State","published":1,"updated":"2016-05-16T21:23:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdrx000isss2bkbg0a3j","content":"<h2 id=\"Deadlock\"><a href=\"#Deadlock\" class=\"headerlink\" title=\"Deadlock\"></a><strong>Deadlock</strong></h2><p>Deadlock occurs if the wait-for graph has a loop in it. If an observer wants to see the loop, he must have a consistent, global view of the entire system. Phantom deadlocks occurs when the latency in the system causes us to miss critical events.</p>\n<hr>\n<h2 id=\"Cut\"><a href=\"#Cut\" class=\"headerlink\" title=\"Cut\"></a><strong>Cut</strong></h2><p>A cut slices through all event histories, and splits each process history into “complete” and “future”.<br>The only thing that needs notice is that cut should be <strong>inconsistent</strong>. </p>\n<hr>\n<h2 id=\"Taking-snapshots-of-system-state\"><a href=\"#Taking-snapshots-of-system-state\" class=\"headerlink\" title=\"Taking snapshots of system state\"></a><strong>Taking snapshots of system state</strong></h2><p>Chandy-Lamport Snapshot is a distributed algorithm to record a consistent global state for the system. It is extremely useful for analyzing stable properties.</p>\n<blockquote>\n<p><strong>Notes: The algorithm</strong><br>The algorithm is divided into two parts: the Marker sending rule and the Marker receiving rule. The special marker message is to specify the state of the system. Every process records state locally.</p>\n<ul>\n<li>Marker Sending Rule:<br>Process starts the algorithm by recording its state, and sends the marker message to every other process except itself</li>\n<li>Marker Receiving Rule:<br>There are two situations:<br>1) If receiving process does not record its state, it will create an empty list for each process, then record the state following the received message. Finally send messages as the Marker Sending Rule.<br>2) If has already recorded, then record the state associate with the sender process</li>\n<li>Non- Marker Receiving Rule:<br>the receiving process place the message at the end of the list.</li>\n</ul>\n</blockquote>\n<p>The algorithm would probably not telling you some states (not recorded), and the final recorded state never is a global state. The final state would happen only if the first marker message is horizontal.</p>\n<p>There are some observations about the algorithm: 1) The algorithm will definitely terminate; 2) The recorded state is a globally consistent state, but is not necessarily the system will actually occupied. <strong>But it doesn’t matter because no one will observe that anyway.</strong> 3) Any stable properties that are true for the recorded state are also true for all post snapshot states</p>\n<hr>\n<h2 id=\"Distributed-Debugging\"><a href=\"#Distributed-Debugging\" class=\"headerlink\" title=\"Distributed Debugging\"></a><strong>Distributed Debugging</strong></h2><p>If we list all the possible states (lattice), then we can test if some property is possibly true, by <strong>finding a set of states that all linearization will pass through</strong></p>\n","excerpt":"","more":"<h2 id=\"Deadlock\"><a href=\"#Deadlock\" class=\"headerlink\" title=\"Deadlock\"></a><strong>Deadlock</strong></h2><p>Deadlock occurs if the wait-for graph has a loop in it. If an observer wants to see the loop, he must have a consistent, global view of the entire system. Phantom deadlocks occurs when the latency in the system causes us to miss critical events.</p>\n<hr>\n<h2 id=\"Cut\"><a href=\"#Cut\" class=\"headerlink\" title=\"Cut\"></a><strong>Cut</strong></h2><p>A cut slices through all event histories, and splits each process history into “complete” and “future”.<br>The only thing that needs notice is that cut should be <strong>inconsistent</strong>. </p>\n<hr>\n<h2 id=\"Taking-snapshots-of-system-state\"><a href=\"#Taking-snapshots-of-system-state\" class=\"headerlink\" title=\"Taking snapshots of system state\"></a><strong>Taking snapshots of system state</strong></h2><p>Chandy-Lamport Snapshot is a distributed algorithm to record a consistent global state for the system. It is extremely useful for analyzing stable properties.</p>\n<blockquote>\n<p><strong>Notes: The algorithm</strong><br>The algorithm is divided into two parts: the Marker sending rule and the Marker receiving rule. The special marker message is to specify the state of the system. Every process records state locally.</p>\n<ul>\n<li>Marker Sending Rule:<br>Process starts the algorithm by recording its state, and sends the marker message to every other process except itself</li>\n<li>Marker Receiving Rule:<br>There are two situations:<br>1) If receiving process does not record its state, it will create an empty list for each process, then record the state following the received message. Finally send messages as the Marker Sending Rule.<br>2) If has already recorded, then record the state associate with the sender process</li>\n<li>Non- Marker Receiving Rule:<br>the receiving process place the message at the end of the list.</li>\n</ul>\n</blockquote>\n<p>The algorithm would probably not telling you some states (not recorded), and the final recorded state never is a global state. The final state would happen only if the first marker message is horizontal.</p>\n<p>There are some observations about the algorithm: 1) The algorithm will definitely terminate; 2) The recorded state is a globally consistent state, but is not necessarily the system will actually occupied. <strong>But it doesn’t matter because no one will observe that anyway.</strong> 3) Any stable properties that are true for the recorded state are also true for all post snapshot states</p>\n<hr>\n<h2 id=\"Distributed-Debugging\"><a href=\"#Distributed-Debugging\" class=\"headerlink\" title=\"Distributed Debugging\"></a><strong>Distributed Debugging</strong></h2><p>If we list all the possible states (lattice), then we can test if some property is possibly true, by <strong>finding a set of states that all linearization will pass through</strong></p>\n"},{"title":"Group Communication & Consensus","date":"2016-05-16T06:23:00.000Z","description":"Part 1 talks about different types of group communication ordering and routing approaches; Part 2 describes basic Byzantine problem and its solution.","_content":"\nPart 1: Group Communication\n---\n - **Multicast routing: two approaches**\n\t- Flooding: Messages sent to neighbors, percolating from sender throughout the network. In this approach we only need local knowledge at each other.\n\t\t- If it is played in an uncontrolled flooding way, then problem would be if two router forward message to each other, there would be an endless retransmission.\n\t\t-> One solution is that we add a unique sequence number when sending a message. Each message would only forward message it has never seen before.\n\t\t-> If you don't want to use sequence number, then you can choose **reverse path forwarding**. Messages are forwarded to all neighbors, but only if it arrived on shortest path back to source. To be clearer, messages would only get forwarded only when messages are coming from sender directly.\n\t\t-> More efficiently, **pruning control** could send messages upstream if no attached hosts are in the mcast group. This will prevent unnecessary message multicasting.\n\t- Spanning tree: Messages will be sent along predetermined paths, the shortcoming is that it requires complex maintenance of routing tree.\n - **Multicast communication**\n\t- Reliable multicast\nReliable multicast builds on top of basic multicast, the general mechanism is that if a message is delivered to any process in group, then it will be delivered to all process in group\n**Hold-back queue**: messages should be delivered in certain order\n\t - Multicast ordering requirements:\n**Unordered**:  rare\n**FIFO Order**: If a correct process multicast m1 -> multicast m2, then every correct process delivers m1 before m2. Implemented by sequence number.\n**Causal Order**: Stronger version of FIFO Order, implemented by timestamp.\n**Total Order**: implemented by ISIS algorithm\n\n> **Notes: Difference between FIFO and Causal**\n> According to the professor, FIFO means that the messages are put into the hold-back queue in the order that they are received by the node. The node may see the message in non-causal order. Causal order means that the node sorts the messages in order according to its causality (in certain circumstances, the timestamp).\n\nISIS Algorithm\n> - Each Process keeps integers A and P\n>  - is largest agreed sequence # it has seen in the group - P is the largest sequence # it has proposed\n> - Receivers reply with a proposed sequence #, Max(A,P)+1 (and put in hold-back queue)\n> - Psender collects proposals from each receiver and multicasts a reply with largest one (now an agreed #)\n> - Receivers then insert message in hold-back queue sorted by smallest agreed sequence #\n> Messages at head with agreed sequence # are delivered\n\n\n----------\n\nPart 2 Consensus\n===\n\n**Byzantine Generals**\nByzantine general problem describes a situation that some processes could be malicious processes. There are two different simple situations:\n\n 1. Commander lies. If the commander lies, then different Lieutenants may get different commands and cannot get consensus on the order.\n 2. Lieutenant lies. If Lieutenant lies, then the message sending between different Lieutenants may be inconsistent.\n\n**Solution:** \nSo the question relies on how to reach consensus among Lieutenants. If the number of Lieutenants (N) is more than the faulty Lieutenants (f), then it would be sufficient to reach consensus.\n`N ≥ 3f + 1`\n","source":"_posts/Group_Communication_&_consensus.md","raw":"---\ntitle: Group Communication & Consensus\ndate: 2016-05-16 14:23:00\ncategory: DS_Notes\ntags: Distributed_System\ndescription: Part 1 talks about different types of group communication ordering and routing approaches; Part 2 describes basic Byzantine problem and its solution.\n---\n\nPart 1: Group Communication\n---\n - **Multicast routing: two approaches**\n\t- Flooding: Messages sent to neighbors, percolating from sender throughout the network. In this approach we only need local knowledge at each other.\n\t\t- If it is played in an uncontrolled flooding way, then problem would be if two router forward message to each other, there would be an endless retransmission.\n\t\t-> One solution is that we add a unique sequence number when sending a message. Each message would only forward message it has never seen before.\n\t\t-> If you don't want to use sequence number, then you can choose **reverse path forwarding**. Messages are forwarded to all neighbors, but only if it arrived on shortest path back to source. To be clearer, messages would only get forwarded only when messages are coming from sender directly.\n\t\t-> More efficiently, **pruning control** could send messages upstream if no attached hosts are in the mcast group. This will prevent unnecessary message multicasting.\n\t- Spanning tree: Messages will be sent along predetermined paths, the shortcoming is that it requires complex maintenance of routing tree.\n - **Multicast communication**\n\t- Reliable multicast\nReliable multicast builds on top of basic multicast, the general mechanism is that if a message is delivered to any process in group, then it will be delivered to all process in group\n**Hold-back queue**: messages should be delivered in certain order\n\t - Multicast ordering requirements:\n**Unordered**:  rare\n**FIFO Order**: If a correct process multicast m1 -> multicast m2, then every correct process delivers m1 before m2. Implemented by sequence number.\n**Causal Order**: Stronger version of FIFO Order, implemented by timestamp.\n**Total Order**: implemented by ISIS algorithm\n\n> **Notes: Difference between FIFO and Causal**\n> According to the professor, FIFO means that the messages are put into the hold-back queue in the order that they are received by the node. The node may see the message in non-causal order. Causal order means that the node sorts the messages in order according to its causality (in certain circumstances, the timestamp).\n\nISIS Algorithm\n> - Each Process keeps integers A and P\n>  - is largest agreed sequence # it has seen in the group - P is the largest sequence # it has proposed\n> - Receivers reply with a proposed sequence #, Max(A,P)+1 (and put in hold-back queue)\n> - Psender collects proposals from each receiver and multicasts a reply with largest one (now an agreed #)\n> - Receivers then insert message in hold-back queue sorted by smallest agreed sequence #\n> Messages at head with agreed sequence # are delivered\n\n\n----------\n\nPart 2 Consensus\n===\n\n**Byzantine Generals**\nByzantine general problem describes a situation that some processes could be malicious processes. There are two different simple situations:\n\n 1. Commander lies. If the commander lies, then different Lieutenants may get different commands and cannot get consensus on the order.\n 2. Lieutenant lies. If Lieutenant lies, then the message sending between different Lieutenants may be inconsistent.\n\n**Solution:** \nSo the question relies on how to reach consensus among Lieutenants. If the number of Lieutenants (N) is more than the faulty Lieutenants (f), then it would be sufficient to reach consensus.\n`N ≥ 3f + 1`\n","slug":"Group_Communication_&_consensus","published":1,"updated":"2016-05-16T21:25:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdrz000msss2efwwz2xo","content":"<h2 id=\"Part-1-Group-Communication\"><a href=\"#Part-1-Group-Communication\" class=\"headerlink\" title=\"Part 1: Group Communication\"></a>Part 1: Group Communication</h2><ul>\n<li><strong>Multicast routing: two approaches</strong><ul>\n<li>Flooding: Messages sent to neighbors, percolating from sender throughout the network. In this approach we only need local knowledge at each other.<ul>\n<li>If it is played in an uncontrolled flooding way, then problem would be if two router forward message to each other, there would be an endless retransmission.<br>-&gt; One solution is that we add a unique sequence number when sending a message. Each message would only forward message it has never seen before.<br>-&gt; If you don’t want to use sequence number, then you can choose <strong>reverse path forwarding</strong>. Messages are forwarded to all neighbors, but only if it arrived on shortest path back to source. To be clearer, messages would only get forwarded only when messages are coming from sender directly.<br>-&gt; More efficiently, <strong>pruning control</strong> could send messages upstream if no attached hosts are in the mcast group. This will prevent unnecessary message multicasting.</li>\n</ul>\n</li>\n<li>Spanning tree: Messages will be sent along predetermined paths, the shortcoming is that it requires complex maintenance of routing tree.</li>\n</ul>\n</li>\n<li><strong>Multicast communication</strong><ul>\n<li>Reliable multicast<br>Reliable multicast builds on top of basic multicast, the general mechanism is that if a message is delivered to any process in group, then it will be delivered to all process in group<br><strong>Hold-back queue</strong>: messages should be delivered in certain order<ul>\n<li>Multicast ordering requirements:<br><strong>Unordered</strong>:  rare<br><strong>FIFO Order</strong>: If a correct process multicast m1 -&gt; multicast m2, then every correct process delivers m1 before m2. Implemented by sequence number.<br><strong>Causal Order</strong>: Stronger version of FIFO Order, implemented by timestamp.<br><strong>Total Order</strong>: implemented by ISIS algorithm</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Notes: Difference between FIFO and Causal</strong><br>According to the professor, FIFO means that the messages are put into the hold-back queue in the order that they are received by the node. The node may see the message in non-causal order. Causal order means that the node sorts the messages in order according to its causality (in certain circumstances, the timestamp).</p>\n</blockquote>\n<p>ISIS Algorithm</p>\n<blockquote>\n<ul>\n<li>Each Process keeps integers A and P<ul>\n<li>is largest agreed sequence # it has seen in the group - P is the largest sequence # it has proposed</li>\n</ul>\n</li>\n<li>Receivers reply with a proposed sequence #, Max(A,P)+1 (and put in hold-back queue)</li>\n<li>Psender collects proposals from each receiver and multicasts a reply with largest one (now an agreed #)</li>\n<li>Receivers then insert message in hold-back queue sorted by smallest agreed sequence #<br>Messages at head with agreed sequence # are delivered</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"Part-2-Consensus\"><a href=\"#Part-2-Consensus\" class=\"headerlink\" title=\"Part 2 Consensus\"></a>Part 2 Consensus</h1><p><strong>Byzantine Generals</strong><br>Byzantine general problem describes a situation that some processes could be malicious processes. There are two different simple situations:</p>\n<ol>\n<li>Commander lies. If the commander lies, then different Lieutenants may get different commands and cannot get consensus on the order.</li>\n<li>Lieutenant lies. If Lieutenant lies, then the message sending between different Lieutenants may be inconsistent.</li>\n</ol>\n<p><strong>Solution:</strong><br>So the question relies on how to reach consensus among Lieutenants. If the number of Lieutenants (N) is more than the faulty Lieutenants (f), then it would be sufficient to reach consensus.<br><code>N ≥ 3f + 1</code></p>\n","excerpt":"","more":"<h2 id=\"Part-1-Group-Communication\"><a href=\"#Part-1-Group-Communication\" class=\"headerlink\" title=\"Part 1: Group Communication\"></a>Part 1: Group Communication</h2><ul>\n<li><strong>Multicast routing: two approaches</strong><ul>\n<li>Flooding: Messages sent to neighbors, percolating from sender throughout the network. In this approach we only need local knowledge at each other.<ul>\n<li>If it is played in an uncontrolled flooding way, then problem would be if two router forward message to each other, there would be an endless retransmission.<br>-&gt; One solution is that we add a unique sequence number when sending a message. Each message would only forward message it has never seen before.<br>-&gt; If you don’t want to use sequence number, then you can choose <strong>reverse path forwarding</strong>. Messages are forwarded to all neighbors, but only if it arrived on shortest path back to source. To be clearer, messages would only get forwarded only when messages are coming from sender directly.<br>-&gt; More efficiently, <strong>pruning control</strong> could send messages upstream if no attached hosts are in the mcast group. This will prevent unnecessary message multicasting.</li>\n</ul>\n</li>\n<li>Spanning tree: Messages will be sent along predetermined paths, the shortcoming is that it requires complex maintenance of routing tree.</li>\n</ul>\n</li>\n<li><strong>Multicast communication</strong><ul>\n<li>Reliable multicast<br>Reliable multicast builds on top of basic multicast, the general mechanism is that if a message is delivered to any process in group, then it will be delivered to all process in group<br><strong>Hold-back queue</strong>: messages should be delivered in certain order<ul>\n<li>Multicast ordering requirements:<br><strong>Unordered</strong>:  rare<br><strong>FIFO Order</strong>: If a correct process multicast m1 -&gt; multicast m2, then every correct process delivers m1 before m2. Implemented by sequence number.<br><strong>Causal Order</strong>: Stronger version of FIFO Order, implemented by timestamp.<br><strong>Total Order</strong>: implemented by ISIS algorithm</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Notes: Difference between FIFO and Causal</strong><br>According to the professor, FIFO means that the messages are put into the hold-back queue in the order that they are received by the node. The node may see the message in non-causal order. Causal order means that the node sorts the messages in order according to its causality (in certain circumstances, the timestamp).</p>\n</blockquote>\n<p>ISIS Algorithm</p>\n<blockquote>\n<ul>\n<li>Each Process keeps integers A and P<ul>\n<li>is largest agreed sequence # it has seen in the group - P is the largest sequence # it has proposed</li>\n</ul>\n</li>\n<li>Receivers reply with a proposed sequence #, Max(A,P)+1 (and put in hold-back queue)</li>\n<li>Psender collects proposals from each receiver and multicasts a reply with largest one (now an agreed #)</li>\n<li>Receivers then insert message in hold-back queue sorted by smallest agreed sequence #<br>Messages at head with agreed sequence # are delivered</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"Part-2-Consensus\"><a href=\"#Part-2-Consensus\" class=\"headerlink\" title=\"Part 2 Consensus\"></a>Part 2 Consensus</h1><p><strong>Byzantine Generals</strong><br>Byzantine general problem describes a situation that some processes could be malicious processes. There are two different simple situations:</p>\n<ol>\n<li>Commander lies. If the commander lies, then different Lieutenants may get different commands and cannot get consensus on the order.</li>\n<li>Lieutenant lies. If Lieutenant lies, then the message sending between different Lieutenants may be inconsistent.</li>\n</ol>\n<p><strong>Solution:</strong><br>So the question relies on how to reach consensus among Lieutenants. If the number of Lieutenants (N) is more than the faulty Lieutenants (f), then it would be sufficient to reach consensus.<br><code>N ≥ 3f + 1</code></p>\n"},{"title":"Paxos algorithm","date":"2016-05-16T06:35:30.000Z","_content":"\n**Conceptions and Assumptions**\n---\nPaxos algorithm is one of the most brilliant ideas (perhaps the most brilliant, according to [Michael Burrows](http://research.google.com/pubs/author24014.html)) talking about how fault-not-so-tolerant system reaches consistency on some value.\n\nAbove all, there are some assumptions:\n1. Assume that all the processors are **non-evil** processors, which means we consider the system as non-byzantine system;\n2. All processes communicate with asynchronous messages;\n3. All processes have durable storage available which can be read after a process failure.\n\nBased on the assumptions above, Paxos guarantees that **whatever faults happens in the system, the consistency protocol would never get wrong**.\n<!--more-->\n\n**Roles in Paxos**\n---\n - **Proposers**: They propose a value to have consensus on.\n\t- **Leader: ** A distinguished proposer, required to make progress.\n - **Acceptors: ** They hear about the proposals and accept them.\n - **Learners: ** They wish to learn about the agreed values.\n\n**One Value Scenario**\n---\nFirst we describe the situation on how one value is agreed in Paxos.\n\n1. Proposer send $M_{prepare}$ containing value $V$ to a quorum of Accepters, the proposal contains a globally unique number $N$.\n2. Accepter keeps track of its **highest** previous accepted number $N_{prev}$ and its value $V$. When it receives $M_{prepare}$, it compares $N$ and $N_{prev}$, if $N > N_{prev}$, send $M_{promise}$ back;\n3. When Proposer receives a quorum of $M_{promise}$, then it send $M_{accept}$ to the quorum of Acceptors.\n4. Upon receiving the accept message, if $N > N_{prev}$, it must accept the message. After reaching consistency between acceptors, they send accepted message to the learner.\n\n**Multi-value Scenario**\n---\nIf different proposers send multiple values, what happened? The author of **[Paxos Made Simple](http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf)** (which is not simple at all...) describes the general phases.\n\n> **Notes: General Phases of Paxos**\n> **Phase 1**\n> (a) A proposer selects a proposal number n and sends a prepare request with number n to a majority of acceptors.\n> (b) If an acceptor receives a prepare request with number n greater than that of any prepare request to which it has already responded, then it responds to the request with a promise not to accept any more proposals numbered less than n and with the highest-numbered pro-posal (if any) that it has accepted.\n> **Phase 2**\n> (a) If the proposer receives a response to its prepare requests (numbered n) from a majority of acceptors, then it sends an accept request to each of those acceptors for a proposal numbered n with a value v , where v is the value of the highest-numbered proposal among the responses, or is any value if the responses reported no proposals.\n\n**Situation 1:**\nIf the second proposal receives at the time when the first proposal is accepted, then the Acceptor would send $M_{promise}$ back with its current $N$ and $V$. Upon receiving the $N$ and $V$, the second Proposer then broadcast the message with certain $V$.\n\n**Situation 2: **\nIf before accepting the value, the proposal receives a proposal with a bigger $N$ (smaller $N$ would be discarded directly), then the pending accepted $V$ would be discarded. The original $M_{accepted}$ would be replaced as $M_{rejected}$.\n\nThis [blog](http://codemacro.com/2014/10/15/explain-poxos/) gives a very easy and clear overview of Paxos algorithm. [Wiki](https://en.wikipedia.org/wiki/Paxos_%28computer_science%29) also did a good job on this.","source":"_posts/Paxos_Algorithm.md","raw":"---\ntitle: Paxos algorithm\ndate: 2016-05-16 14:35:30\ncategory: DS_Notes\ntags: Distributed_System\n---\n\n**Conceptions and Assumptions**\n---\nPaxos algorithm is one of the most brilliant ideas (perhaps the most brilliant, according to [Michael Burrows](http://research.google.com/pubs/author24014.html)) talking about how fault-not-so-tolerant system reaches consistency on some value.\n\nAbove all, there are some assumptions:\n1. Assume that all the processors are **non-evil** processors, which means we consider the system as non-byzantine system;\n2. All processes communicate with asynchronous messages;\n3. All processes have durable storage available which can be read after a process failure.\n\nBased on the assumptions above, Paxos guarantees that **whatever faults happens in the system, the consistency protocol would never get wrong**.\n<!--more-->\n\n**Roles in Paxos**\n---\n - **Proposers**: They propose a value to have consensus on.\n\t- **Leader: ** A distinguished proposer, required to make progress.\n - **Acceptors: ** They hear about the proposals and accept them.\n - **Learners: ** They wish to learn about the agreed values.\n\n**One Value Scenario**\n---\nFirst we describe the situation on how one value is agreed in Paxos.\n\n1. Proposer send $M_{prepare}$ containing value $V$ to a quorum of Accepters, the proposal contains a globally unique number $N$.\n2. Accepter keeps track of its **highest** previous accepted number $N_{prev}$ and its value $V$. When it receives $M_{prepare}$, it compares $N$ and $N_{prev}$, if $N > N_{prev}$, send $M_{promise}$ back;\n3. When Proposer receives a quorum of $M_{promise}$, then it send $M_{accept}$ to the quorum of Acceptors.\n4. Upon receiving the accept message, if $N > N_{prev}$, it must accept the message. After reaching consistency between acceptors, they send accepted message to the learner.\n\n**Multi-value Scenario**\n---\nIf different proposers send multiple values, what happened? The author of **[Paxos Made Simple](http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf)** (which is not simple at all...) describes the general phases.\n\n> **Notes: General Phases of Paxos**\n> **Phase 1**\n> (a) A proposer selects a proposal number n and sends a prepare request with number n to a majority of acceptors.\n> (b) If an acceptor receives a prepare request with number n greater than that of any prepare request to which it has already responded, then it responds to the request with a promise not to accept any more proposals numbered less than n and with the highest-numbered pro-posal (if any) that it has accepted.\n> **Phase 2**\n> (a) If the proposer receives a response to its prepare requests (numbered n) from a majority of acceptors, then it sends an accept request to each of those acceptors for a proposal numbered n with a value v , where v is the value of the highest-numbered proposal among the responses, or is any value if the responses reported no proposals.\n\n**Situation 1:**\nIf the second proposal receives at the time when the first proposal is accepted, then the Acceptor would send $M_{promise}$ back with its current $N$ and $V$. Upon receiving the $N$ and $V$, the second Proposer then broadcast the message with certain $V$.\n\n**Situation 2: **\nIf before accepting the value, the proposal receives a proposal with a bigger $N$ (smaller $N$ would be discarded directly), then the pending accepted $V$ would be discarded. The original $M_{accepted}$ would be replaced as $M_{rejected}$.\n\nThis [blog](http://codemacro.com/2014/10/15/explain-poxos/) gives a very easy and clear overview of Paxos algorithm. [Wiki](https://en.wikipedia.org/wiki/Paxos_%28computer_science%29) also did a good job on this.","slug":"Paxos_Algorithm","published":1,"updated":"2016-05-16T21:36:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kds1000psss267ul3ztw","content":"<h2 id=\"Conceptions-and-Assumptions\"><a href=\"#Conceptions-and-Assumptions\" class=\"headerlink\" title=\"Conceptions and Assumptions\"></a><strong>Conceptions and Assumptions</strong></h2><p>Paxos algorithm is one of the most brilliant ideas (perhaps the most brilliant, according to <a href=\"http://research.google.com/pubs/author24014.html\" target=\"_blank\" rel=\"external\">Michael Burrows</a>) talking about how fault-not-so-tolerant system reaches consistency on some value.</p>\n<p>Above all, there are some assumptions:</p>\n<ol>\n<li>Assume that all the processors are <strong>non-evil</strong> processors, which means we consider the system as non-byzantine system;</li>\n<li>All processes communicate with asynchronous messages;</li>\n<li>All processes have durable storage available which can be read after a process failure.</li>\n</ol>\n<p>Based on the assumptions above, Paxos guarantees that <strong>whatever faults happens in the system, the consistency protocol would never get wrong</strong>.<br><a id=\"more\"></a></p>\n<h2 id=\"Roles-in-Paxos\"><a href=\"#Roles-in-Paxos\" class=\"headerlink\" title=\"Roles in Paxos\"></a><strong>Roles in Paxos</strong></h2><ul>\n<li><strong>Proposers</strong>: They propose a value to have consensus on.<ul>\n<li><strong>Leader: </strong> A distinguished proposer, required to make progress.</li>\n</ul>\n</li>\n<li><strong>Acceptors: </strong> They hear about the proposals and accept them.</li>\n<li><strong>Learners: </strong> They wish to learn about the agreed values.</li>\n</ul>\n<h2 id=\"One-Value-Scenario\"><a href=\"#One-Value-Scenario\" class=\"headerlink\" title=\"One Value Scenario\"></a><strong>One Value Scenario</strong></h2><p>First we describe the situation on how one value is agreed in Paxos.</p>\n<ol>\n<li>Proposer send $M_{prepare}$ containing value $V$ to a quorum of Accepters, the proposal contains a globally unique number $N$.</li>\n<li>Accepter keeps track of its <strong>highest</strong> previous accepted number $N<em>{prev}$ and its value $V$. When it receives $M</em>{prepare}$, it compares $N$ and $N<em>{prev}$, if $N &gt; N</em>{prev}$, send $M_{promise}$ back;</li>\n<li>When Proposer receives a quorum of $M<em>{promise}$, then it send $M</em>{accept}$ to the quorum of Acceptors.</li>\n<li>Upon receiving the accept message, if $N &gt; N_{prev}$, it must accept the message. After reaching consistency between acceptors, they send accepted message to the learner.</li>\n</ol>\n<h2 id=\"Multi-value-Scenario\"><a href=\"#Multi-value-Scenario\" class=\"headerlink\" title=\"Multi-value Scenario\"></a><strong>Multi-value Scenario</strong></h2><p>If different proposers send multiple values, what happened? The author of <strong><a href=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf\" target=\"_blank\" rel=\"external\">Paxos Made Simple</a></strong> (which is not simple at all…) describes the general phases.</p>\n<blockquote>\n<p><strong>Notes: General Phases of Paxos</strong><br><strong>Phase 1</strong><br>(a) A proposer selects a proposal number n and sends a prepare request with number n to a majority of acceptors.<br>(b) If an acceptor receives a prepare request with number n greater than that of any prepare request to which it has already responded, then it responds to the request with a promise not to accept any more proposals numbered less than n and with the highest-numbered pro-posal (if any) that it has accepted.<br><strong>Phase 2</strong><br>(a) If the proposer receives a response to its prepare requests (numbered n) from a majority of acceptors, then it sends an accept request to each of those acceptors for a proposal numbered n with a value v , where v is the value of the highest-numbered proposal among the responses, or is any value if the responses reported no proposals.</p>\n</blockquote>\n<p><strong>Situation 1:</strong><br>If the second proposal receives at the time when the first proposal is accepted, then the Acceptor would send $M_{promise}$ back with its current $N$ and $V$. Upon receiving the $N$ and $V$, the second Proposer then broadcast the message with certain $V$.</p>\n<p><strong>Situation 2: </strong><br>If before accepting the value, the proposal receives a proposal with a bigger $N$ (smaller $N$ would be discarded directly), then the pending accepted $V$ would be discarded. The original $M<em>{accepted}$ would be replaced as $M</em>{rejected}$.</p>\n<p>This <a href=\"http://codemacro.com/2014/10/15/explain-poxos/\" target=\"_blank\" rel=\"external\">blog</a> gives a very easy and clear overview of Paxos algorithm. <a href=\"https://en.wikipedia.org/wiki/Paxos_%28computer_science%29\" target=\"_blank\" rel=\"external\">Wiki</a> also did a good job on this.</p>\n","excerpt":"<h2 id=\"Conceptions-and-Assumptions\"><a href=\"#Conceptions-and-Assumptions\" class=\"headerlink\" title=\"Conceptions and Assumptions\"></a><strong>Conceptions and Assumptions</strong></h2><p>Paxos algorithm is one of the most brilliant ideas (perhaps the most brilliant, according to <a href=\"http://research.google.com/pubs/author24014.html\">Michael Burrows</a>) talking about how fault-not-so-tolerant system reaches consistency on some value.</p>\n<p>Above all, there are some assumptions:</p>\n<ol>\n<li>Assume that all the processors are <strong>non-evil</strong> processors, which means we consider the system as non-byzantine system;</li>\n<li>All processes communicate with asynchronous messages;</li>\n<li>All processes have durable storage available which can be read after a process failure.</li>\n</ol>\n<p>Based on the assumptions above, Paxos guarantees that <strong>whatever faults happens in the system, the consistency protocol would never get wrong</strong>.<br>","more":"</p>\n<h2 id=\"Roles-in-Paxos\"><a href=\"#Roles-in-Paxos\" class=\"headerlink\" title=\"Roles in Paxos\"></a><strong>Roles in Paxos</strong></h2><ul>\n<li><strong>Proposers</strong>: They propose a value to have consensus on.<ul>\n<li><strong>Leader: </strong> A distinguished proposer, required to make progress.</li>\n</ul>\n</li>\n<li><strong>Acceptors: </strong> They hear about the proposals and accept them.</li>\n<li><strong>Learners: </strong> They wish to learn about the agreed values.</li>\n</ul>\n<h2 id=\"One-Value-Scenario\"><a href=\"#One-Value-Scenario\" class=\"headerlink\" title=\"One Value Scenario\"></a><strong>One Value Scenario</strong></h2><p>First we describe the situation on how one value is agreed in Paxos.</p>\n<ol>\n<li>Proposer send $M_{prepare}$ containing value $V$ to a quorum of Accepters, the proposal contains a globally unique number $N$.</li>\n<li>Accepter keeps track of its <strong>highest</strong> previous accepted number $N<em>{prev}$ and its value $V$. When it receives $M</em>{prepare}$, it compares $N$ and $N<em>{prev}$, if $N &gt; N</em>{prev}$, send $M_{promise}$ back;</li>\n<li>When Proposer receives a quorum of $M<em>{promise}$, then it send $M</em>{accept}$ to the quorum of Acceptors.</li>\n<li>Upon receiving the accept message, if $N &gt; N_{prev}$, it must accept the message. After reaching consistency between acceptors, they send accepted message to the learner.</li>\n</ol>\n<h2 id=\"Multi-value-Scenario\"><a href=\"#Multi-value-Scenario\" class=\"headerlink\" title=\"Multi-value Scenario\"></a><strong>Multi-value Scenario</strong></h2><p>If different proposers send multiple values, what happened? The author of <strong><a href=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf\">Paxos Made Simple</a></strong> (which is not simple at all…) describes the general phases.</p>\n<blockquote>\n<p><strong>Notes: General Phases of Paxos</strong><br><strong>Phase 1</strong><br>(a) A proposer selects a proposal number n and sends a prepare request with number n to a majority of acceptors.<br>(b) If an acceptor receives a prepare request with number n greater than that of any prepare request to which it has already responded, then it responds to the request with a promise not to accept any more proposals numbered less than n and with the highest-numbered pro-posal (if any) that it has accepted.<br><strong>Phase 2</strong><br>(a) If the proposer receives a response to its prepare requests (numbered n) from a majority of acceptors, then it sends an accept request to each of those acceptors for a proposal numbered n with a value v , where v is the value of the highest-numbered proposal among the responses, or is any value if the responses reported no proposals.</p>\n</blockquote>\n<p><strong>Situation 1:</strong><br>If the second proposal receives at the time when the first proposal is accepted, then the Acceptor would send $M_{promise}$ back with its current $N$ and $V$. Upon receiving the $N$ and $V$, the second Proposer then broadcast the message with certain $V$.</p>\n<p><strong>Situation 2: </strong><br>If before accepting the value, the proposal receives a proposal with a bigger $N$ (smaller $N$ would be discarded directly), then the pending accepted $V$ would be discarded. The original $M<em>{accepted}$ would be replaced as $M</em>{rejected}$.</p>\n<p>This <a href=\"http://codemacro.com/2014/10/15/explain-poxos/\">blog</a> gives a very easy and clear overview of Paxos algorithm. <a href=\"https://en.wikipedia.org/wiki/Paxos_%28computer_science%29\">Wiki</a> also did a good job on this.</p>"},{"title":"Naming","date":"2016-05-16T06:37:00.000Z","_content":"Naming is a mechanism to make machine a human readable identifier. URN (Uniform resource name) has sets of rules to define that. \n<!--more-->\n\n**Navigation**\n---\n**Conception:** Searching for final resolution of a name by traversing realms.\n\n> **Notes: Types of navigation**\n> \n>  - Multicast navigation: Client send request to different namespaces, once it finds the target, the namespace response with the answer.\n>  - Iterative navigation: Every time client send request to namespaces, it replies with a namespace whether it's the target or not.\n>  - Server controlled navigation: Server may take over clients job to perform navigation on behalf of client. The advantage of doing that is reducing the bandwidth, and results can be cached.\n>   - Non-recursive server controlled: local namespace help client to do the multicast job;\n>   - Recursive server controlled: Client sends request to local namespace, local namespace sends request to nearby namespace, nearby namespace sends request to another namespace... When target namespace is found, replies with the answer through the sending route back to the client.\n\n\n----------\n\n\n**Domain Name System**\n---\nDNS is the most successful distributed system. It scales to millions of computers, and its name structure reflects administrative structure of internet. Its main job is to resolve domain names to IP addresses.\n\nWe need a \"Yellow page\" for resources in the network, which can be searched via \"attribute\" not just name.\n\n> **Notes: Why not DNS?**\n> DNS holds some descriptive data, but which is not quite complete, and also, more importantly, DNS isn't organized to search it.\n\n**Methods:** Discovery Service (X.500, LDAP). Building dictionary for attributes... Examples are: Jini discovery service, Bonjour","source":"_posts/Naming.md","raw":"---\ntitle: Naming\ndate: 2016-05-16 14:37:00\ncategory: DS_Notes\ntags: Distributed_System\n---\nNaming is a mechanism to make machine a human readable identifier. URN (Uniform resource name) has sets of rules to define that. \n<!--more-->\n\n**Navigation**\n---\n**Conception:** Searching for final resolution of a name by traversing realms.\n\n> **Notes: Types of navigation**\n> \n>  - Multicast navigation: Client send request to different namespaces, once it finds the target, the namespace response with the answer.\n>  - Iterative navigation: Every time client send request to namespaces, it replies with a namespace whether it's the target or not.\n>  - Server controlled navigation: Server may take over clients job to perform navigation on behalf of client. The advantage of doing that is reducing the bandwidth, and results can be cached.\n>   - Non-recursive server controlled: local namespace help client to do the multicast job;\n>   - Recursive server controlled: Client sends request to local namespace, local namespace sends request to nearby namespace, nearby namespace sends request to another namespace... When target namespace is found, replies with the answer through the sending route back to the client.\n\n\n----------\n\n\n**Domain Name System**\n---\nDNS is the most successful distributed system. It scales to millions of computers, and its name structure reflects administrative structure of internet. Its main job is to resolve domain names to IP addresses.\n\nWe need a \"Yellow page\" for resources in the network, which can be searched via \"attribute\" not just name.\n\n> **Notes: Why not DNS?**\n> DNS holds some descriptive data, but which is not quite complete, and also, more importantly, DNS isn't organized to search it.\n\n**Methods:** Discovery Service (X.500, LDAP). Building dictionary for attributes... Examples are: Jini discovery service, Bonjour","slug":"Naming","published":1,"updated":"2016-05-16T21:37:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kds3000ssss21qm37wp2","content":"<p>Naming is a mechanism to make machine a human readable identifier. URN (Uniform resource name) has sets of rules to define that.<br><a id=\"more\"></a></p>\n<h2 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a><strong>Navigation</strong></h2><p><strong>Conception:</strong> Searching for final resolution of a name by traversing realms.</p>\n<blockquote>\n<p><strong>Notes: Types of navigation</strong></p>\n<ul>\n<li>Multicast navigation: Client send request to different namespaces, once it finds the target, the namespace response with the answer.</li>\n<li>Iterative navigation: Every time client send request to namespaces, it replies with a namespace whether it’s the target or not.</li>\n<li>Server controlled navigation: Server may take over clients job to perform navigation on behalf of client. The advantage of doing that is reducing the bandwidth, and results can be cached.<ul>\n<li>Non-recursive server controlled: local namespace help client to do the multicast job;</li>\n<li>Recursive server controlled: Client sends request to local namespace, local namespace sends request to nearby namespace, nearby namespace sends request to another namespace… When target namespace is found, replies with the answer through the sending route back to the client.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"Domain-Name-System\"><a href=\"#Domain-Name-System\" class=\"headerlink\" title=\"Domain Name System\"></a><strong>Domain Name System</strong></h2><p>DNS is the most successful distributed system. It scales to millions of computers, and its name structure reflects administrative structure of internet. Its main job is to resolve domain names to IP addresses.</p>\n<p>We need a “Yellow page” for resources in the network, which can be searched via “attribute” not just name.</p>\n<blockquote>\n<p><strong>Notes: Why not DNS?</strong><br>DNS holds some descriptive data, but which is not quite complete, and also, more importantly, DNS isn’t organized to search it.</p>\n</blockquote>\n<p><strong>Methods:</strong> Discovery Service (X.500, LDAP). Building dictionary for attributes… Examples are: Jini discovery service, Bonjour</p>\n","excerpt":"<p>Naming is a mechanism to make machine a human readable identifier. URN (Uniform resource name) has sets of rules to define that.<br>","more":"</p>\n<h2 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a><strong>Navigation</strong></h2><p><strong>Conception:</strong> Searching for final resolution of a name by traversing realms.</p>\n<blockquote>\n<p><strong>Notes: Types of navigation</strong></p>\n<ul>\n<li>Multicast navigation: Client send request to different namespaces, once it finds the target, the namespace response with the answer.</li>\n<li>Iterative navigation: Every time client send request to namespaces, it replies with a namespace whether it’s the target or not.</li>\n<li>Server controlled navigation: Server may take over clients job to perform navigation on behalf of client. The advantage of doing that is reducing the bandwidth, and results can be cached.<ul>\n<li>Non-recursive server controlled: local namespace help client to do the multicast job;</li>\n<li>Recursive server controlled: Client sends request to local namespace, local namespace sends request to nearby namespace, nearby namespace sends request to another namespace… When target namespace is found, replies with the answer through the sending route back to the client.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"Domain-Name-System\"><a href=\"#Domain-Name-System\" class=\"headerlink\" title=\"Domain Name System\"></a><strong>Domain Name System</strong></h2><p>DNS is the most successful distributed system. It scales to millions of computers, and its name structure reflects administrative structure of internet. Its main job is to resolve domain names to IP addresses.</p>\n<p>We need a “Yellow page” for resources in the network, which can be searched via “attribute” not just name.</p>\n<blockquote>\n<p><strong>Notes: Why not DNS?</strong><br>DNS holds some descriptive data, but which is not quite complete, and also, more importantly, DNS isn’t organized to search it.</p>\n</blockquote>\n<p><strong>Methods:</strong> Discovery Service (X.500, LDAP). Building dictionary for attributes… Examples are: Jini discovery service, Bonjour</p>"},{"title":"Peer to Peer System","date":"2016-05-16T06:26:00.000Z","description":"This article first talks about the history of P2P System, including Napster, Gnutella and supernode architecture like Skype and KaZaa. Then it discusses DHT and several DHT rules like CAN, Chord and Pastry.","_content":"**History P2P System**\n---\n**1st Generation: Napster**\nNapster is the first generation of music online download company, the architecture of Napster is centralized. The most important part is the index server. The index server stores lists of peers. When a user wants to search for a file, it sends file location request to the index server, and obtain a list of peers with the file, towards which it will send request. Finally the target file is delivered back to the user.\nAnother and the final critical step is, users who gain a file now being responsible for storing and distributing the file (update index to the index server).\n\n**2nd Generation: Gnutella**\nGnutella designed as a P2P architecture in reaction to issues facing Napster. It is fully decentralized and fairly anonymous. In order to join the network, user must find at least one peer in the network. Communicating with those peers can the new user has knowledge of many peers.\nIn order to prevent from message flooding when querying, Gnutella came up with a limited-scope flooding protocol, that puts a **\"peer count\" on depth of query**.\n\n**3rd Generation: Supernodes**\nThe representative platforms are **Skype** and **KaZaa**. Supernodes evolve from ordinary nodes, and may be used for routing and searching. Limitations are: 1) searching and routing within the network are often unreliable, because network is very dynamic, even supernodes come and go as well. Also the bandwidth cost grows exponentially with the size of network (overwhelm slow nodes results in dropped queries and replies); 2) Protocols have evolved, limiting querying speed and tiered system of supernodes.\n\n----------\n\n**DHT (Distributed Hash Table)**\n---\nDHT has property like a normal traditional hash table, which contains (key, value) pairs that stores file name (key) and IP address (value). All the index of files combined into a very large hash table. In order to store the large table, it is divided into different small chunks and distributed to every participated nodes in the system. The distributing rules depends on specific system. Common rules are **CAN**, **Chord**, **Pastry** and **Tapestry**.\n\nIn traditional hash table, removing a bucket forces remapping all the entire keyspace, whereas in DHT, consistent-hashing determines that removing a node does not rearrange the whole keys.\n\n----------\n**Different DHT Rules**\n---\n**Content Addressable Network**\n\nThe CAN architecture is a d-dimensional toroidal coordinate space. It is partitioned into \"rectangular\" zones, each peer owns one zone. When adding a new node, a random space gets split, while all the other nodes are not affected. Node peers have knowledge of their neighboring nodes (sharing the same boundaries).\n\nThe network is quite fault-tolerant and scalable. If one node goes down, a lot of alternative routes could be provided. Every peer has replica for availability.\n\n**Chord**\n\nThe keyspace architecture of [Chord](http://blog.csdn.net/wangxiaoqin00007/article/details/7374833) is a ring. Every node knows its predecessor and successor. It introduces a finger table which contains at least 2^(i - 1) after itself. Searching begins from its successor, when its successor does not contains the resource, search from the furthest node in the finger table. Iterate these steps.\n\nAfter maximum of O(logN) number of nodes that must be contacted can we find the final resource.\n\n>**Notes: Adding a node**\n>Every node within Chord will automatically run a heartbeat check to its finger table and its successor to check if its successor's predecessor is itself or has been changed, which we called it stabilization.\n>So there are four steps referring to node joining:\n>`Join()`\n>`Stabilize()`\n>`Notify(O)`\n>`Fix_fingers()`\n\n**Pastry**\nThe keyspace architecture of Pastry is a modular ring with size of 2^128, the joining and departing rules are like in Chord. \n\n\n----------\n**Summary of [Pastry](http://research.microsoft.com/en-us/um/people/antr/PAST/pastry.pdf)**\n---\n - Pastry performs application-level routing and object location in a potentially very large overlay network of nodes connected via the Internet. \n - Every node has a unique identifier (nodeId). When presented with a message and a key, the key would match the closest nodeId among all currently alive Pastry nodes. Each node keeps track of its immediate neighbors in the nodeId space, and notifies applications of new node arrivals, node failures and recoveries.\n - Pastry takes network locality into account by introducing into leaf table.\n - The experimental in the paper takes up to 100,000 nodes to confirm Pastry's scalability, efficiency, self-organize and adapt to node failures, and its good network locality properties.\n - The number of expected routing steps is $log_2bN$, and [L/2] adjacent nodes won't fail simultaneously.\n - Joining and departing mechanism is similar to [Chord](http://blog.csdn.net/wangxiaoqin00007/article/details/7374833).\n> **NOTES: Design of routing**\n> 1. Given a message, the node first checks to see if the key falls within the leaf set, if so, message would be forwarded to the closest node.\n> 2. If there's no match, check the routing table. The message is forwarded to a node that shares a common prefix with the key by at least one more digit. If the routing table is empty or the associated node is unreachable, forward the message (at least) to the node with same length of nodeId, and is numerically closer to the key then the present nodeId.\n> The procedure would converge in every iteration, because in each step, **the message is forwarded to a node that either shares a longer prefix with the key, or same length prefix but numerically closer to the key than the local node.**","source":"_posts/Peer_to_Peer_System.md","raw":"---\ntitle: Peer to Peer System\ndate: 2016-05-16 14:26:00\ncategory: DS_Notes\ntags: Distributed_System\ndescription: This article first talks about the history of P2P System, including Napster, Gnutella and supernode architecture like Skype and KaZaa. Then it discusses DHT and several DHT rules like CAN, Chord and Pastry.\n---\n**History P2P System**\n---\n**1st Generation: Napster**\nNapster is the first generation of music online download company, the architecture of Napster is centralized. The most important part is the index server. The index server stores lists of peers. When a user wants to search for a file, it sends file location request to the index server, and obtain a list of peers with the file, towards which it will send request. Finally the target file is delivered back to the user.\nAnother and the final critical step is, users who gain a file now being responsible for storing and distributing the file (update index to the index server).\n\n**2nd Generation: Gnutella**\nGnutella designed as a P2P architecture in reaction to issues facing Napster. It is fully decentralized and fairly anonymous. In order to join the network, user must find at least one peer in the network. Communicating with those peers can the new user has knowledge of many peers.\nIn order to prevent from message flooding when querying, Gnutella came up with a limited-scope flooding protocol, that puts a **\"peer count\" on depth of query**.\n\n**3rd Generation: Supernodes**\nThe representative platforms are **Skype** and **KaZaa**. Supernodes evolve from ordinary nodes, and may be used for routing and searching. Limitations are: 1) searching and routing within the network are often unreliable, because network is very dynamic, even supernodes come and go as well. Also the bandwidth cost grows exponentially with the size of network (overwhelm slow nodes results in dropped queries and replies); 2) Protocols have evolved, limiting querying speed and tiered system of supernodes.\n\n----------\n\n**DHT (Distributed Hash Table)**\n---\nDHT has property like a normal traditional hash table, which contains (key, value) pairs that stores file name (key) and IP address (value). All the index of files combined into a very large hash table. In order to store the large table, it is divided into different small chunks and distributed to every participated nodes in the system. The distributing rules depends on specific system. Common rules are **CAN**, **Chord**, **Pastry** and **Tapestry**.\n\nIn traditional hash table, removing a bucket forces remapping all the entire keyspace, whereas in DHT, consistent-hashing determines that removing a node does not rearrange the whole keys.\n\n----------\n**Different DHT Rules**\n---\n**Content Addressable Network**\n\nThe CAN architecture is a d-dimensional toroidal coordinate space. It is partitioned into \"rectangular\" zones, each peer owns one zone. When adding a new node, a random space gets split, while all the other nodes are not affected. Node peers have knowledge of their neighboring nodes (sharing the same boundaries).\n\nThe network is quite fault-tolerant and scalable. If one node goes down, a lot of alternative routes could be provided. Every peer has replica for availability.\n\n**Chord**\n\nThe keyspace architecture of [Chord](http://blog.csdn.net/wangxiaoqin00007/article/details/7374833) is a ring. Every node knows its predecessor and successor. It introduces a finger table which contains at least 2^(i - 1) after itself. Searching begins from its successor, when its successor does not contains the resource, search from the furthest node in the finger table. Iterate these steps.\n\nAfter maximum of O(logN) number of nodes that must be contacted can we find the final resource.\n\n>**Notes: Adding a node**\n>Every node within Chord will automatically run a heartbeat check to its finger table and its successor to check if its successor's predecessor is itself or has been changed, which we called it stabilization.\n>So there are four steps referring to node joining:\n>`Join()`\n>`Stabilize()`\n>`Notify(O)`\n>`Fix_fingers()`\n\n**Pastry**\nThe keyspace architecture of Pastry is a modular ring with size of 2^128, the joining and departing rules are like in Chord. \n\n\n----------\n**Summary of [Pastry](http://research.microsoft.com/en-us/um/people/antr/PAST/pastry.pdf)**\n---\n - Pastry performs application-level routing and object location in a potentially very large overlay network of nodes connected via the Internet. \n - Every node has a unique identifier (nodeId). When presented with a message and a key, the key would match the closest nodeId among all currently alive Pastry nodes. Each node keeps track of its immediate neighbors in the nodeId space, and notifies applications of new node arrivals, node failures and recoveries.\n - Pastry takes network locality into account by introducing into leaf table.\n - The experimental in the paper takes up to 100,000 nodes to confirm Pastry's scalability, efficiency, self-organize and adapt to node failures, and its good network locality properties.\n - The number of expected routing steps is $log_2bN$, and [L/2] adjacent nodes won't fail simultaneously.\n - Joining and departing mechanism is similar to [Chord](http://blog.csdn.net/wangxiaoqin00007/article/details/7374833).\n> **NOTES: Design of routing**\n> 1. Given a message, the node first checks to see if the key falls within the leaf set, if so, message would be forwarded to the closest node.\n> 2. If there's no match, check the routing table. The message is forwarded to a node that shares a common prefix with the key by at least one more digit. If the routing table is empty or the associated node is unreachable, forward the message (at least) to the node with same length of nodeId, and is numerically closer to the key then the present nodeId.\n> The procedure would converge in every iteration, because in each step, **the message is forwarded to a node that either shares a longer prefix with the key, or same length prefix but numerically closer to the key than the local node.**","slug":"Peer_to_Peer_System","published":1,"updated":"2016-05-16T21:29:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kds6000vsss2r72z3lir","content":"<h2 id=\"History-P2P-System\"><a href=\"#History-P2P-System\" class=\"headerlink\" title=\"History P2P System\"></a><strong>History P2P System</strong></h2><p><strong>1st Generation: Napster</strong><br>Napster is the first generation of music online download company, the architecture of Napster is centralized. The most important part is the index server. The index server stores lists of peers. When a user wants to search for a file, it sends file location request to the index server, and obtain a list of peers with the file, towards which it will send request. Finally the target file is delivered back to the user.<br>Another and the final critical step is, users who gain a file now being responsible for storing and distributing the file (update index to the index server).</p>\n<p><strong>2nd Generation: Gnutella</strong><br>Gnutella designed as a P2P architecture in reaction to issues facing Napster. It is fully decentralized and fairly anonymous. In order to join the network, user must find at least one peer in the network. Communicating with those peers can the new user has knowledge of many peers.<br>In order to prevent from message flooding when querying, Gnutella came up with a limited-scope flooding protocol, that puts a <strong>“peer count” on depth of query</strong>.</p>\n<p><strong>3rd Generation: Supernodes</strong><br>The representative platforms are <strong>Skype</strong> and <strong>KaZaa</strong>. Supernodes evolve from ordinary nodes, and may be used for routing and searching. Limitations are: 1) searching and routing within the network are often unreliable, because network is very dynamic, even supernodes come and go as well. Also the bandwidth cost grows exponentially with the size of network (overwhelm slow nodes results in dropped queries and replies); 2) Protocols have evolved, limiting querying speed and tiered system of supernodes.</p>\n<hr>\n<h2 id=\"DHT-Distributed-Hash-Table\"><a href=\"#DHT-Distributed-Hash-Table\" class=\"headerlink\" title=\"DHT (Distributed Hash Table)\"></a><strong>DHT (Distributed Hash Table)</strong></h2><p>DHT has property like a normal traditional hash table, which contains (key, value) pairs that stores file name (key) and IP address (value). All the index of files combined into a very large hash table. In order to store the large table, it is divided into different small chunks and distributed to every participated nodes in the system. The distributing rules depends on specific system. Common rules are <strong>CAN</strong>, <strong>Chord</strong>, <strong>Pastry</strong> and <strong>Tapestry</strong>.</p>\n<p>In traditional hash table, removing a bucket forces remapping all the entire keyspace, whereas in DHT, consistent-hashing determines that removing a node does not rearrange the whole keys.</p>\n<hr>\n<h2 id=\"Different-DHT-Rules\"><a href=\"#Different-DHT-Rules\" class=\"headerlink\" title=\"Different DHT Rules\"></a><strong>Different DHT Rules</strong></h2><p><strong>Content Addressable Network</strong></p>\n<p>The CAN architecture is a d-dimensional toroidal coordinate space. It is partitioned into “rectangular” zones, each peer owns one zone. When adding a new node, a random space gets split, while all the other nodes are not affected. Node peers have knowledge of their neighboring nodes (sharing the same boundaries).</p>\n<p>The network is quite fault-tolerant and scalable. If one node goes down, a lot of alternative routes could be provided. Every peer has replica for availability.</p>\n<p><strong>Chord</strong></p>\n<p>The keyspace architecture of <a href=\"http://blog.csdn.net/wangxiaoqin00007/article/details/7374833\" target=\"_blank\" rel=\"external\">Chord</a> is a ring. Every node knows its predecessor and successor. It introduces a finger table which contains at least 2^(i - 1) after itself. Searching begins from its successor, when its successor does not contains the resource, search from the furthest node in the finger table. Iterate these steps.</p>\n<p>After maximum of O(logN) number of nodes that must be contacted can we find the final resource.</p>\n<blockquote>\n<p><strong>Notes: Adding a node</strong><br>Every node within Chord will automatically run a heartbeat check to its finger table and its successor to check if its successor’s predecessor is itself or has been changed, which we called it stabilization.<br>So there are four steps referring to node joining:<br><code>Join()</code><br><code>Stabilize()</code><br><code>Notify(O)</code><br><code>Fix_fingers()</code></p>\n</blockquote>\n<p><strong>Pastry</strong><br>The keyspace architecture of Pastry is a modular ring with size of 2^128, the joining and departing rules are like in Chord. </p>\n<hr>\n<h2 id=\"Summary-of-Pastry\"><a href=\"#Summary-of-Pastry\" class=\"headerlink\" title=\"Summary of Pastry\"></a><strong>Summary of <a href=\"http://research.microsoft.com/en-us/um/people/antr/PAST/pastry.pdf\" target=\"_blank\" rel=\"external\">Pastry</a></strong></h2><ul>\n<li>Pastry performs application-level routing and object location in a potentially very large overlay network of nodes connected via the Internet. </li>\n<li>Every node has a unique identifier (nodeId). When presented with a message and a key, the key would match the closest nodeId among all currently alive Pastry nodes. Each node keeps track of its immediate neighbors in the nodeId space, and notifies applications of new node arrivals, node failures and recoveries.</li>\n<li>Pastry takes network locality into account by introducing into leaf table.</li>\n<li>The experimental in the paper takes up to 100,000 nodes to confirm Pastry’s scalability, efficiency, self-organize and adapt to node failures, and its good network locality properties.</li>\n<li>The number of expected routing steps is $log_2bN$, and [L/2] adjacent nodes won’t fail simultaneously.</li>\n<li>Joining and departing mechanism is similar to <a href=\"http://blog.csdn.net/wangxiaoqin00007/article/details/7374833\" target=\"_blank\" rel=\"external\">Chord</a>.<blockquote>\n<p><strong>NOTES: Design of routing</strong></p>\n<ol>\n<li>Given a message, the node first checks to see if the key falls within the leaf set, if so, message would be forwarded to the closest node.</li>\n<li>If there’s no match, check the routing table. The message is forwarded to a node that shares a common prefix with the key by at least one more digit. If the routing table is empty or the associated node is unreachable, forward the message (at least) to the node with same length of nodeId, and is numerically closer to the key then the present nodeId.<br>The procedure would converge in every iteration, because in each step, <strong>the message is forwarded to a node that either shares a longer prefix with the key, or same length prefix but numerically closer to the key than the local node.</strong></li>\n</ol>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"History-P2P-System\"><a href=\"#History-P2P-System\" class=\"headerlink\" title=\"History P2P System\"></a><strong>History P2P System</strong></h2><p><strong>1st Generation: Napster</strong><br>Napster is the first generation of music online download company, the architecture of Napster is centralized. The most important part is the index server. The index server stores lists of peers. When a user wants to search for a file, it sends file location request to the index server, and obtain a list of peers with the file, towards which it will send request. Finally the target file is delivered back to the user.<br>Another and the final critical step is, users who gain a file now being responsible for storing and distributing the file (update index to the index server).</p>\n<p><strong>2nd Generation: Gnutella</strong><br>Gnutella designed as a P2P architecture in reaction to issues facing Napster. It is fully decentralized and fairly anonymous. In order to join the network, user must find at least one peer in the network. Communicating with those peers can the new user has knowledge of many peers.<br>In order to prevent from message flooding when querying, Gnutella came up with a limited-scope flooding protocol, that puts a <strong>“peer count” on depth of query</strong>.</p>\n<p><strong>3rd Generation: Supernodes</strong><br>The representative platforms are <strong>Skype</strong> and <strong>KaZaa</strong>. Supernodes evolve from ordinary nodes, and may be used for routing and searching. Limitations are: 1) searching and routing within the network are often unreliable, because network is very dynamic, even supernodes come and go as well. Also the bandwidth cost grows exponentially with the size of network (overwhelm slow nodes results in dropped queries and replies); 2) Protocols have evolved, limiting querying speed and tiered system of supernodes.</p>\n<hr>\n<h2 id=\"DHT-Distributed-Hash-Table\"><a href=\"#DHT-Distributed-Hash-Table\" class=\"headerlink\" title=\"DHT (Distributed Hash Table)\"></a><strong>DHT (Distributed Hash Table)</strong></h2><p>DHT has property like a normal traditional hash table, which contains (key, value) pairs that stores file name (key) and IP address (value). All the index of files combined into a very large hash table. In order to store the large table, it is divided into different small chunks and distributed to every participated nodes in the system. The distributing rules depends on specific system. Common rules are <strong>CAN</strong>, <strong>Chord</strong>, <strong>Pastry</strong> and <strong>Tapestry</strong>.</p>\n<p>In traditional hash table, removing a bucket forces remapping all the entire keyspace, whereas in DHT, consistent-hashing determines that removing a node does not rearrange the whole keys.</p>\n<hr>\n<h2 id=\"Different-DHT-Rules\"><a href=\"#Different-DHT-Rules\" class=\"headerlink\" title=\"Different DHT Rules\"></a><strong>Different DHT Rules</strong></h2><p><strong>Content Addressable Network</strong></p>\n<p>The CAN architecture is a d-dimensional toroidal coordinate space. It is partitioned into “rectangular” zones, each peer owns one zone. When adding a new node, a random space gets split, while all the other nodes are not affected. Node peers have knowledge of their neighboring nodes (sharing the same boundaries).</p>\n<p>The network is quite fault-tolerant and scalable. If one node goes down, a lot of alternative routes could be provided. Every peer has replica for availability.</p>\n<p><strong>Chord</strong></p>\n<p>The keyspace architecture of <a href=\"http://blog.csdn.net/wangxiaoqin00007/article/details/7374833\">Chord</a> is a ring. Every node knows its predecessor and successor. It introduces a finger table which contains at least 2^(i - 1) after itself. Searching begins from its successor, when its successor does not contains the resource, search from the furthest node in the finger table. Iterate these steps.</p>\n<p>After maximum of O(logN) number of nodes that must be contacted can we find the final resource.</p>\n<blockquote>\n<p><strong>Notes: Adding a node</strong><br>Every node within Chord will automatically run a heartbeat check to its finger table and its successor to check if its successor’s predecessor is itself or has been changed, which we called it stabilization.<br>So there are four steps referring to node joining:<br><code>Join()</code><br><code>Stabilize()</code><br><code>Notify(O)</code><br><code>Fix_fingers()</code></p>\n</blockquote>\n<p><strong>Pastry</strong><br>The keyspace architecture of Pastry is a modular ring with size of 2^128, the joining and departing rules are like in Chord. </p>\n<hr>\n<h2 id=\"Summary-of-Pastry\"><a href=\"#Summary-of-Pastry\" class=\"headerlink\" title=\"Summary of Pastry\"></a><strong>Summary of <a href=\"http://research.microsoft.com/en-us/um/people/antr/PAST/pastry.pdf\">Pastry</a></strong></h2><ul>\n<li>Pastry performs application-level routing and object location in a potentially very large overlay network of nodes connected via the Internet. </li>\n<li>Every node has a unique identifier (nodeId). When presented with a message and a key, the key would match the closest nodeId among all currently alive Pastry nodes. Each node keeps track of its immediate neighbors in the nodeId space, and notifies applications of new node arrivals, node failures and recoveries.</li>\n<li>Pastry takes network locality into account by introducing into leaf table.</li>\n<li>The experimental in the paper takes up to 100,000 nodes to confirm Pastry’s scalability, efficiency, self-organize and adapt to node failures, and its good network locality properties.</li>\n<li>The number of expected routing steps is $log_2bN$, and [L/2] adjacent nodes won’t fail simultaneously.</li>\n<li>Joining and departing mechanism is similar to <a href=\"http://blog.csdn.net/wangxiaoqin00007/article/details/7374833\">Chord</a>.<blockquote>\n<p><strong>NOTES: Design of routing</strong></p>\n<ol>\n<li>Given a message, the node first checks to see if the key falls within the leaf set, if so, message would be forwarded to the closest node.</li>\n<li>If there’s no match, check the routing table. The message is forwarded to a node that shares a common prefix with the key by at least one more digit. If the routing table is empty or the associated node is unreachable, forward the message (at least) to the node with same length of nodeId, and is numerically closer to the key then the present nodeId.<br>The procedure would converge in every iteration, because in each step, <strong>the message is forwarded to a node that either shares a longer prefix with the key, or same length prefix but numerically closer to the key than the local node.</strong></li>\n</ol>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Replication Communication","date":"2016-05-16T06:02:38.000Z","_content":"**State Machine Approach**\n---\nState machine consists of state variables and commands. State variable means an encoding of state, command means functions that can be performed.\n\nAnything that can be structured as procedures and procedure calls can be structured as state machines and requests.\n<!--more-->\n\n> **Notes: Ordering with Paxos**\n> Paxos allows replicas to come to consensus on the order of requests;\n> it makes a proposal that Nth command number should have value V (function and parameters), and state machine can execute commands 1..n if no gaps\n> **What about gaps?**\n> If leader fails, then gaps need to be filled. Either by learning previous values, or finding out that no one has proposed that value\n\nState machine is a good conceptual model for other ds concepts and protocols, and failure masking using voting. The results are distinguishable from a non-faulty server.\n\nThen disadvantage of state machine is about overhead, hard to understand concurrent requirements and too much redundancy.\n\n\n----------\n\n\n**Primary Back-up Approach**\n---\n**Basic prototype**\n\nClient send request through front end, to the primary node of the remote replica manager, then the primary **atomically** executes the request. If it changes any state, then it sends the updated states, response, request id to the backup nodes. Backup nodes send ACK when finish executing, and primary node send back response to the front end, which response to the client.\n\n**Some Optimizations**\n\nClient could send to any remote node through front end. If backup node receives the request, it forward to the primary node first, the rest steps are the same.\n\n**Reading Optimization**\n\nIn order to offload read workload from primary node, read request could send to any of the nodes and does not need to forward to the primary node.\n\n**Primary Migration**\n\nParticularly in mobile computing, nodes could be disconnected from others. In order to solve that problem, we allow migration from backup to primary. \n\nPrior to disconnection, the node becomes primary from backup. Then while in disconnecting period, data could still be updated and transmitted, (old) data could still be read from other processes. When recovery, back-to-live node would get the updated states.\n\n\n----------\n\n\n**MapReduce**\n---\n**Execution**\n\n1. User program invokes MapReduce library to perform task;\n2. Library forks processes on several machines, one master and several workers;\n3. Input data splits into many pieces, each piece contains 16-64MB, and one piece will be handled by one map. Input data is located in HDFS.\n4. Master assigns some workers to do the map job, and some workers to do the reduce job, and between the map and reduce job, partition function partitions the intermediate data for ordering.\n\n**Fault Tolerant**\n\nWhat happens when a worker dies?\n\n1. If a map worker dies (periodically pinged by master), master masks the map task as idle and reassigns the task, intermediate data may get lost.\nTo be more specific, the machine would reset to its initial state, and they are ready to be scheduled to other workers. Even for completed map workers do they need to reassign, because **the data is stored on their machines and is hence unusable.**\n\n2. If a reducer dies (periodically pinged by master), it may not be any trouble because a reducer might have already completed the calculation, and doesn't need to be reassigned.\n\n3. Master would make checkpoints of its data structures periodically. If a master dies, it would start a new copy from its last checkpoint status. Google MapReduce doesn't implement any other protocols, as master failure is rare.\n4. Map workers write intermediate data to local disks, and reduce workers remotely read (RPC) data and write to output files.\n\nReference : http://map-reduce.wikispaces.asu.edu/\n","source":"_posts/Replication_Communication.md","raw":"---\ntitle: Replication Communication\ndate: 2016-05-16 14:02:38\ncategory: DS_Notes\ntags: Distributed_System\n---\n**State Machine Approach**\n---\nState machine consists of state variables and commands. State variable means an encoding of state, command means functions that can be performed.\n\nAnything that can be structured as procedures and procedure calls can be structured as state machines and requests.\n<!--more-->\n\n> **Notes: Ordering with Paxos**\n> Paxos allows replicas to come to consensus on the order of requests;\n> it makes a proposal that Nth command number should have value V (function and parameters), and state machine can execute commands 1..n if no gaps\n> **What about gaps?**\n> If leader fails, then gaps need to be filled. Either by learning previous values, or finding out that no one has proposed that value\n\nState machine is a good conceptual model for other ds concepts and protocols, and failure masking using voting. The results are distinguishable from a non-faulty server.\n\nThen disadvantage of state machine is about overhead, hard to understand concurrent requirements and too much redundancy.\n\n\n----------\n\n\n**Primary Back-up Approach**\n---\n**Basic prototype**\n\nClient send request through front end, to the primary node of the remote replica manager, then the primary **atomically** executes the request. If it changes any state, then it sends the updated states, response, request id to the backup nodes. Backup nodes send ACK when finish executing, and primary node send back response to the front end, which response to the client.\n\n**Some Optimizations**\n\nClient could send to any remote node through front end. If backup node receives the request, it forward to the primary node first, the rest steps are the same.\n\n**Reading Optimization**\n\nIn order to offload read workload from primary node, read request could send to any of the nodes and does not need to forward to the primary node.\n\n**Primary Migration**\n\nParticularly in mobile computing, nodes could be disconnected from others. In order to solve that problem, we allow migration from backup to primary. \n\nPrior to disconnection, the node becomes primary from backup. Then while in disconnecting period, data could still be updated and transmitted, (old) data could still be read from other processes. When recovery, back-to-live node would get the updated states.\n\n\n----------\n\n\n**MapReduce**\n---\n**Execution**\n\n1. User program invokes MapReduce library to perform task;\n2. Library forks processes on several machines, one master and several workers;\n3. Input data splits into many pieces, each piece contains 16-64MB, and one piece will be handled by one map. Input data is located in HDFS.\n4. Master assigns some workers to do the map job, and some workers to do the reduce job, and between the map and reduce job, partition function partitions the intermediate data for ordering.\n\n**Fault Tolerant**\n\nWhat happens when a worker dies?\n\n1. If a map worker dies (periodically pinged by master), master masks the map task as idle and reassigns the task, intermediate data may get lost.\nTo be more specific, the machine would reset to its initial state, and they are ready to be scheduled to other workers. Even for completed map workers do they need to reassign, because **the data is stored on their machines and is hence unusable.**\n\n2. If a reducer dies (periodically pinged by master), it may not be any trouble because a reducer might have already completed the calculation, and doesn't need to be reassigned.\n\n3. Master would make checkpoints of its data structures periodically. If a master dies, it would start a new copy from its last checkpoint status. Google MapReduce doesn't implement any other protocols, as master failure is rare.\n4. Map workers write intermediate data to local disks, and reduce workers remotely read (RPC) data and write to output files.\n\nReference : http://map-reduce.wikispaces.asu.edu/\n","slug":"Replication_Communication","published":1,"updated":"2016-05-16T21:03:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kds9000ysss2jxr6do76","content":"<h2 id=\"State-Machine-Approach\"><a href=\"#State-Machine-Approach\" class=\"headerlink\" title=\"State Machine Approach\"></a><strong>State Machine Approach</strong></h2><p>State machine consists of state variables and commands. State variable means an encoding of state, command means functions that can be performed.</p>\n<p>Anything that can be structured as procedures and procedure calls can be structured as state machines and requests.<br><a id=\"more\"></a></p>\n<blockquote>\n<p><strong>Notes: Ordering with Paxos</strong><br>Paxos allows replicas to come to consensus on the order of requests;<br>it makes a proposal that Nth command number should have value V (function and parameters), and state machine can execute commands 1..n if no gaps<br><strong>What about gaps?</strong><br>If leader fails, then gaps need to be filled. Either by learning previous values, or finding out that no one has proposed that value</p>\n</blockquote>\n<p>State machine is a good conceptual model for other ds concepts and protocols, and failure masking using voting. The results are distinguishable from a non-faulty server.</p>\n<p>Then disadvantage of state machine is about overhead, hard to understand concurrent requirements and too much redundancy.</p>\n<hr>\n<h2 id=\"Primary-Back-up-Approach\"><a href=\"#Primary-Back-up-Approach\" class=\"headerlink\" title=\"Primary Back-up Approach\"></a><strong>Primary Back-up Approach</strong></h2><p><strong>Basic prototype</strong></p>\n<p>Client send request through front end, to the primary node of the remote replica manager, then the primary <strong>atomically</strong> executes the request. If it changes any state, then it sends the updated states, response, request id to the backup nodes. Backup nodes send ACK when finish executing, and primary node send back response to the front end, which response to the client.</p>\n<p><strong>Some Optimizations</strong></p>\n<p>Client could send to any remote node through front end. If backup node receives the request, it forward to the primary node first, the rest steps are the same.</p>\n<p><strong>Reading Optimization</strong></p>\n<p>In order to offload read workload from primary node, read request could send to any of the nodes and does not need to forward to the primary node.</p>\n<p><strong>Primary Migration</strong></p>\n<p>Particularly in mobile computing, nodes could be disconnected from others. In order to solve that problem, we allow migration from backup to primary. </p>\n<p>Prior to disconnection, the node becomes primary from backup. Then while in disconnecting period, data could still be updated and transmitted, (old) data could still be read from other processes. When recovery, back-to-live node would get the updated states.</p>\n<hr>\n<h2 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a><strong>MapReduce</strong></h2><p><strong>Execution</strong></p>\n<ol>\n<li>User program invokes MapReduce library to perform task;</li>\n<li>Library forks processes on several machines, one master and several workers;</li>\n<li>Input data splits into many pieces, each piece contains 16-64MB, and one piece will be handled by one map. Input data is located in HDFS.</li>\n<li>Master assigns some workers to do the map job, and some workers to do the reduce job, and between the map and reduce job, partition function partitions the intermediate data for ordering.</li>\n</ol>\n<p><strong>Fault Tolerant</strong></p>\n<p>What happens when a worker dies?</p>\n<ol>\n<li><p>If a map worker dies (periodically pinged by master), master masks the map task as idle and reassigns the task, intermediate data may get lost.<br>To be more specific, the machine would reset to its initial state, and they are ready to be scheduled to other workers. Even for completed map workers do they need to reassign, because <strong>the data is stored on their machines and is hence unusable.</strong></p>\n</li>\n<li><p>If a reducer dies (periodically pinged by master), it may not be any trouble because a reducer might have already completed the calculation, and doesn’t need to be reassigned.</p>\n</li>\n<li><p>Master would make checkpoints of its data structures periodically. If a master dies, it would start a new copy from its last checkpoint status. Google MapReduce doesn’t implement any other protocols, as master failure is rare.</p>\n</li>\n<li>Map workers write intermediate data to local disks, and reduce workers remotely read (RPC) data and write to output files.</li>\n</ol>\n<p>Reference : <a href=\"http://map-reduce.wikispaces.asu.edu/\" target=\"_blank\" rel=\"external\">http://map-reduce.wikispaces.asu.edu/</a></p>\n","excerpt":"<h2 id=\"State-Machine-Approach\"><a href=\"#State-Machine-Approach\" class=\"headerlink\" title=\"State Machine Approach\"></a><strong>State Machine Approach</strong></h2><p>State machine consists of state variables and commands. State variable means an encoding of state, command means functions that can be performed.</p>\n<p>Anything that can be structured as procedures and procedure calls can be structured as state machines and requests.<br>","more":"</p>\n<blockquote>\n<p><strong>Notes: Ordering with Paxos</strong><br>Paxos allows replicas to come to consensus on the order of requests;<br>it makes a proposal that Nth command number should have value V (function and parameters), and state machine can execute commands 1..n if no gaps<br><strong>What about gaps?</strong><br>If leader fails, then gaps need to be filled. Either by learning previous values, or finding out that no one has proposed that value</p>\n</blockquote>\n<p>State machine is a good conceptual model for other ds concepts and protocols, and failure masking using voting. The results are distinguishable from a non-faulty server.</p>\n<p>Then disadvantage of state machine is about overhead, hard to understand concurrent requirements and too much redundancy.</p>\n<hr>\n<h2 id=\"Primary-Back-up-Approach\"><a href=\"#Primary-Back-up-Approach\" class=\"headerlink\" title=\"Primary Back-up Approach\"></a><strong>Primary Back-up Approach</strong></h2><p><strong>Basic prototype</strong></p>\n<p>Client send request through front end, to the primary node of the remote replica manager, then the primary <strong>atomically</strong> executes the request. If it changes any state, then it sends the updated states, response, request id to the backup nodes. Backup nodes send ACK when finish executing, and primary node send back response to the front end, which response to the client.</p>\n<p><strong>Some Optimizations</strong></p>\n<p>Client could send to any remote node through front end. If backup node receives the request, it forward to the primary node first, the rest steps are the same.</p>\n<p><strong>Reading Optimization</strong></p>\n<p>In order to offload read workload from primary node, read request could send to any of the nodes and does not need to forward to the primary node.</p>\n<p><strong>Primary Migration</strong></p>\n<p>Particularly in mobile computing, nodes could be disconnected from others. In order to solve that problem, we allow migration from backup to primary. </p>\n<p>Prior to disconnection, the node becomes primary from backup. Then while in disconnecting period, data could still be updated and transmitted, (old) data could still be read from other processes. When recovery, back-to-live node would get the updated states.</p>\n<hr>\n<h2 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a><strong>MapReduce</strong></h2><p><strong>Execution</strong></p>\n<ol>\n<li>User program invokes MapReduce library to perform task;</li>\n<li>Library forks processes on several machines, one master and several workers;</li>\n<li>Input data splits into many pieces, each piece contains 16-64MB, and one piece will be handled by one map. Input data is located in HDFS.</li>\n<li>Master assigns some workers to do the map job, and some workers to do the reduce job, and between the map and reduce job, partition function partitions the intermediate data for ordering.</li>\n</ol>\n<p><strong>Fault Tolerant</strong></p>\n<p>What happens when a worker dies?</p>\n<ol>\n<li><p>If a map worker dies (periodically pinged by master), master masks the map task as idle and reassigns the task, intermediate data may get lost.<br>To be more specific, the machine would reset to its initial state, and they are ready to be scheduled to other workers. Even for completed map workers do they need to reassign, because <strong>the data is stored on their machines and is hence unusable.</strong></p>\n</li>\n<li><p>If a reducer dies (periodically pinged by master), it may not be any trouble because a reducer might have already completed the calculation, and doesn’t need to be reassigned.</p>\n</li>\n<li><p>Master would make checkpoints of its data structures periodically. If a master dies, it would start a new copy from its last checkpoint status. Google MapReduce doesn’t implement any other protocols, as master failure is rare.</p>\n</li>\n<li>Map workers write intermediate data to local disks, and reduce workers remotely read (RPC) data and write to output files.</li>\n</ol>\n<p>Reference : <a href=\"http://map-reduce.wikispaces.asu.edu/\">http://map-reduce.wikispaces.asu.edu/</a></p>"},{"title":"Segment Tree","date":"2016-05-18T04:02:00.000Z","_content":"\n**Concepts**\n---\nSegment tree is a data structure that stores interval, mainly realize a maximum querying time consuming of log(n).\n<!--more-->\n\n                  [0, 3, max=4]\n                 /             \\\n          [0,1,max=4]        [2,3,max=3]\n          /         \\        /         \\\n   \t[0,0,max=1] [1,1,max=4] [2,2,max=2], [3,3,max=3]\nThe basic structure loos like this. Every interval is cut into two parts (subnodes), [start, mid] and [mid + 1, end]. It is extremely useful when we want to find the minimum/maximum number in specified intervals.\n\nA segment tree for a set I of n intervals uses O(n log n) storage and can be built in O(n log n) time.[^1]\n\n[^1]: https://en.wikipedia.org/wiki/Segment_tree\n\n**Typical problem**\n---\n#### **[Interval Minimum Number](http://www.lintcode.com/en/problem/interval-minimum-number/)**\n\nGiven an integer array (index from 0 to n-1, where n is the size of this array), and an query list. Each query has two integers [start, end]. For each query, calculate the minimum number between index start and end in the given array, return the result list.\n\n#### Example\n\nFor array [1,2,7,8,5], and queries [(1,2),(0,4),(2,4)], return [2,1,5]\n\n#### Code\n\n```python\n\"\"\"\nDefinition of Interval.\nclass Interval(object):\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\"\"\"\n\nclass SegmentTree(object):\n    def __init__(self, start, end, min):\n        self.start, self.end = start, end\n        self.min = min\n\nclass Solution:\t\n    \"\"\"\n    @param A, queries: Given an integer array and an Interval list\n                       The ith query is [queries[i-1].start, queries[i-1].end]\n    @return: The result list\n    \"\"\"\n    \n    def intervalMinNumber(self, A, queries):\n        # write your code here\n        # build segment tree first\n        root = self.buildTree(A, 0, len(A) - 1)\n        return self.search(root, queries)\n        \n    # @param A, start, end\n    # return: segment tree root\n    def buildTree(self, A, start, end):\n        if start > end:\n            return None\n        node = SegmentTree(start, end, A[start])\n        if start == end:\n            return node\n        mid = (start + end) / 2\n        node.left = self.buildTree(A, start, mid)\n        node.right = self.buildTree(A, mid + 1, end)\n        if node.left is not None:\n            if node.left.min < node.min or node.right.min < node.min:\n                node.min = min(node.left.min, node.right.min)\n        return node\n        \n    # @param A, queries\n    # @return: The result list\n    def search(self, root, queries):\n        li = []\n        for query in queries:\n            start = query.start\n            end = query.end\n            li.append(self.searchForMin(root, start, end))\n        return li\n    \n    def searchForMin(self, root, start, end):\n        if (end < root.start or start > root.end):\n            return sys.maxint\n        if (start <= root.start and end >= root.end):\n            return root.min\n        return min(self.searchForMin(root.left, start, end), \n                   self.searchForMin(root.right, start, end))\n```\n\n","source":"_posts/Segment_tree.md","raw":"---\ntitle: Segment Tree\ndate: 2016-05-18 12:02:00\ncategory: 解题报告\ntags: LeetCode\n---\n\n**Concepts**\n---\nSegment tree is a data structure that stores interval, mainly realize a maximum querying time consuming of log(n).\n<!--more-->\n\n                  [0, 3, max=4]\n                 /             \\\n          [0,1,max=4]        [2,3,max=3]\n          /         \\        /         \\\n   \t[0,0,max=1] [1,1,max=4] [2,2,max=2], [3,3,max=3]\nThe basic structure loos like this. Every interval is cut into two parts (subnodes), [start, mid] and [mid + 1, end]. It is extremely useful when we want to find the minimum/maximum number in specified intervals.\n\nA segment tree for a set I of n intervals uses O(n log n) storage and can be built in O(n log n) time.[^1]\n\n[^1]: https://en.wikipedia.org/wiki/Segment_tree\n\n**Typical problem**\n---\n#### **[Interval Minimum Number](http://www.lintcode.com/en/problem/interval-minimum-number/)**\n\nGiven an integer array (index from 0 to n-1, where n is the size of this array), and an query list. Each query has two integers [start, end]. For each query, calculate the minimum number between index start and end in the given array, return the result list.\n\n#### Example\n\nFor array [1,2,7,8,5], and queries [(1,2),(0,4),(2,4)], return [2,1,5]\n\n#### Code\n\n```python\n\"\"\"\nDefinition of Interval.\nclass Interval(object):\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\"\"\"\n\nclass SegmentTree(object):\n    def __init__(self, start, end, min):\n        self.start, self.end = start, end\n        self.min = min\n\nclass Solution:\t\n    \"\"\"\n    @param A, queries: Given an integer array and an Interval list\n                       The ith query is [queries[i-1].start, queries[i-1].end]\n    @return: The result list\n    \"\"\"\n    \n    def intervalMinNumber(self, A, queries):\n        # write your code here\n        # build segment tree first\n        root = self.buildTree(A, 0, len(A) - 1)\n        return self.search(root, queries)\n        \n    # @param A, start, end\n    # return: segment tree root\n    def buildTree(self, A, start, end):\n        if start > end:\n            return None\n        node = SegmentTree(start, end, A[start])\n        if start == end:\n            return node\n        mid = (start + end) / 2\n        node.left = self.buildTree(A, start, mid)\n        node.right = self.buildTree(A, mid + 1, end)\n        if node.left is not None:\n            if node.left.min < node.min or node.right.min < node.min:\n                node.min = min(node.left.min, node.right.min)\n        return node\n        \n    # @param A, queries\n    # @return: The result list\n    def search(self, root, queries):\n        li = []\n        for query in queries:\n            start = query.start\n            end = query.end\n            li.append(self.searchForMin(root, start, end))\n        return li\n    \n    def searchForMin(self, root, start, end):\n        if (end < root.start or start > root.end):\n            return sys.maxint\n        if (start <= root.start and end >= root.end):\n            return root.min\n        return min(self.searchForMin(root.left, start, end), \n                   self.searchForMin(root.right, start, end))\n```\n\n","slug":"Segment_tree","published":1,"updated":"2016-05-22T23:59:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdse0011sss200fht9z6","content":"<h2 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a><strong>Concepts</strong></h2><p>Segment tree is a data structure that stores interval, mainly realize a maximum querying time consuming of log(n).<br><a id=\"more\"></a></p>\n<pre><code>           [0, 3, max=4]\n          /             \\\n   [0,1,max=4]        [2,3,max=3]\n   /         \\        /         \\\n[0,0,max=1] [1,1,max=4] [2,2,max=2], [3,3,max=3]\n</code></pre><p>The basic structure loos like this. Every interval is cut into two parts (subnodes), [start, mid] and [mid + 1, end]. It is extremely useful when we want to find the minimum/maximum number in specified intervals.</p>\n<p>A segment tree for a set I of n intervals uses O(n log n) storage and can be built in O(n log n) time.<a href=\"https://en.wikipedia.org/wiki/Segment_tree\" target=\"_blank\" rel=\"external\">^1</a></p>\n<h2 id=\"Typical-problem\"><a href=\"#Typical-problem\" class=\"headerlink\" title=\"Typical problem\"></a><strong>Typical problem</strong></h2><h4 id=\"Interval-Minimum-Number\"><a href=\"#Interval-Minimum-Number\" class=\"headerlink\" title=\"Interval Minimum Number\"></a><strong><a href=\"http://www.lintcode.com/en/problem/interval-minimum-number/\" target=\"_blank\" rel=\"external\">Interval Minimum Number</a></strong></h4><p>Given an integer array (index from 0 to n-1, where n is the size of this array), and an query list. Each query has two integers [start, end]. For each query, calculate the minimum number between index start and end in the given array, return the result list.</p>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>For array [1,2,7,8,5], and queries [(1,2),(0,4),(2,4)], return [2,1,5]</p>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span><br><span class=\"line\">Definition of Interval.</span><br><span class=\"line\">class Interval(object):</span><br><span class=\"line\">    def __init__(self, start, end):</span><br><span class=\"line\">        self.start = start</span><br><span class=\"line\">        self.end = end</span><br><span class=\"line\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SegmentTree</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, start, end, min)</span>:</span></span><br><span class=\"line\">        self.start, self.end = start, end</span><br><span class=\"line\">        self.min = min</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span>\t</span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span><br><span class=\"line\">    @param A, queries: Given an integer array and an Interval list</span><br><span class=\"line\">                       The ith query is [queries[i-1].start, queries[i-1].end]</span><br><span class=\"line\">    @return: The result list</span><br><span class=\"line\">    \"\"\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">intervalMinNumber</span><span class=\"params\">(self, A, queries)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># write your code here</span></span><br><span class=\"line\">        <span class=\"comment\"># build segment tree first</span></span><br><span class=\"line\">        root = self.buildTree(A, <span class=\"number\">0</span>, len(A) - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.search(root, queries)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># @param A, start, end</span></span><br><span class=\"line\">    <span class=\"comment\"># return: segment tree root</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildTree</span><span class=\"params\">(self, A, start, end)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> start &gt; end:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        node = SegmentTree(start, end, A[start])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> start == end:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node</span><br><span class=\"line\">        mid = (start + end) / <span class=\"number\">2</span></span><br><span class=\"line\">        node.left = self.buildTree(A, start, mid)</span><br><span class=\"line\">        node.right = self.buildTree(A, mid + <span class=\"number\">1</span>, end)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.left <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.left.min &lt; node.min <span class=\"keyword\">or</span> node.right.min &lt; node.min:</span><br><span class=\"line\">                node.min = min(node.left.min, node.right.min)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># @param A, queries</span></span><br><span class=\"line\">    <span class=\"comment\"># @return: The result list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, root, queries)</span>:</span></span><br><span class=\"line\">        li = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> query <span class=\"keyword\">in</span> queries:</span><br><span class=\"line\">            start = query.start</span><br><span class=\"line\">            end = query.end</span><br><span class=\"line\">            li.append(self.searchForMin(root, start, end))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">searchForMin</span><span class=\"params\">(self, root, start, end)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end &lt; root.start <span class=\"keyword\">or</span> start &gt; root.end):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sys.maxint</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt;= root.start <span class=\"keyword\">and</span> end &gt;= root.end):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.min</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(self.searchForMin(root.left, start, end), </span><br><span class=\"line\">                   self.searchForMin(root.right, start, end))</span><br></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a><strong>Concepts</strong></h2><p>Segment tree is a data structure that stores interval, mainly realize a maximum querying time consuming of log(n).<br>","more":"</p>\n<pre><code>           [0, 3, max=4]\n          /             \\\n   [0,1,max=4]        [2,3,max=3]\n   /         \\        /         \\\n[0,0,max=1] [1,1,max=4] [2,2,max=2], [3,3,max=3]\n</code></pre><p>The basic structure loos like this. Every interval is cut into two parts (subnodes), [start, mid] and [mid + 1, end]. It is extremely useful when we want to find the minimum/maximum number in specified intervals.</p>\n<p>A segment tree for a set I of n intervals uses O(n log n) storage and can be built in O(n log n) time.<a href=\"https://en.wikipedia.org/wiki/Segment_tree\">^1</a></p>\n<h2 id=\"Typical-problem\"><a href=\"#Typical-problem\" class=\"headerlink\" title=\"Typical problem\"></a><strong>Typical problem</strong></h2><h4 id=\"Interval-Minimum-Number\"><a href=\"#Interval-Minimum-Number\" class=\"headerlink\" title=\"Interval Minimum Number\"></a><strong><a href=\"http://www.lintcode.com/en/problem/interval-minimum-number/\">Interval Minimum Number</a></strong></h4><p>Given an integer array (index from 0 to n-1, where n is the size of this array), and an query list. Each query has two integers [start, end]. For each query, calculate the minimum number between index start and end in the given array, return the result list.</p>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>For array [1,2,7,8,5], and queries [(1,2),(0,4),(2,4)], return [2,1,5]</p>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span><br><span class=\"line\">Definition of Interval.</span><br><span class=\"line\">class Interval(object):</span><br><span class=\"line\">    def __init__(self, start, end):</span><br><span class=\"line\">        self.start = start</span><br><span class=\"line\">        self.end = end</span><br><span class=\"line\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SegmentTree</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, start, end, min)</span>:</span></span><br><span class=\"line\">        self.start, self.end = start, end</span><br><span class=\"line\">        self.min = min</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span>\t</span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span><br><span class=\"line\">    @param A, queries: Given an integer array and an Interval list</span><br><span class=\"line\">                       The ith query is [queries[i-1].start, queries[i-1].end]</span><br><span class=\"line\">    @return: The result list</span><br><span class=\"line\">    \"\"\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">intervalMinNumber</span><span class=\"params\">(self, A, queries)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># write your code here</span></span><br><span class=\"line\">        <span class=\"comment\"># build segment tree first</span></span><br><span class=\"line\">        root = self.buildTree(A, <span class=\"number\">0</span>, len(A) - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.search(root, queries)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># @param A, start, end</span></span><br><span class=\"line\">    <span class=\"comment\"># return: segment tree root</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildTree</span><span class=\"params\">(self, A, start, end)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> start &gt; end:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        node = SegmentTree(start, end, A[start])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> start == end:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node</span><br><span class=\"line\">        mid = (start + end) / <span class=\"number\">2</span></span><br><span class=\"line\">        node.left = self.buildTree(A, start, mid)</span><br><span class=\"line\">        node.right = self.buildTree(A, mid + <span class=\"number\">1</span>, end)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.left <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.left.min &lt; node.min <span class=\"keyword\">or</span> node.right.min &lt; node.min:</span><br><span class=\"line\">                node.min = min(node.left.min, node.right.min)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># @param A, queries</span></span><br><span class=\"line\">    <span class=\"comment\"># @return: The result list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, root, queries)</span>:</span></span><br><span class=\"line\">        li = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> query <span class=\"keyword\">in</span> queries:</span><br><span class=\"line\">            start = query.start</span><br><span class=\"line\">            end = query.end</span><br><span class=\"line\">            li.append(self.searchForMin(root, start, end))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">searchForMin</span><span class=\"params\">(self, root, start, end)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end &lt; root.start <span class=\"keyword\">or</span> start &gt; root.end):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sys.maxint</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt;= root.start <span class=\"keyword\">and</span> end &gt;= root.end):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.min</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(self.searchForMin(root.left, start, end), </span><br><span class=\"line\">                   self.searchForMin(root.right, start, end))</span><br></pre></td></tr></table></figure>"},{"title":"Type of consistency","date":"2016-05-16T06:33:00.000Z","_content":"Performance and consistency are always a pair of tradeoff.\n\nToday we discuss different kinds of consistency.\n<!--more-->\n\n**Strict Consistency**\n---\nIf process updates at T1, and then updates at T2, when read data between T1 and T2, following the strict consistency rule, the user would read data at T1.\n\nStrict consistency is not desired and not often used, except in micro-processors.\n\n**Sequential Consistency**\n---\nSequential consistency is relatively simple, all the processors agree on one sequential order. It is often used in distributed shared memory and distributed transactions. \n\nThis rule requires that the write operation to be seen by all the processors immediately.\n\n**Causal Consistency**\n---\nCausal consistency requires write operations in \"->\" order. Yet concurrent operations could be seen in different order in different processors (different from sequential consistency).\n\nThis rule could be **implemented** with vector clock to order updates.\n\n**Eventual Consistency**\n---\nIn this situation, read is assumed to be more than write. Data that is received slightly out of date is acceptable.\n\nThe model is described as client-centric model, which means that if the eventual results (writes) are propagated, then the rule is met.\n\nIn one sentence, **In the absence of updates, all writes will propagate eventually**.\n\n**Implementation** is quite simple: Give data items a lifetime, after which replica must read the item again\n\n**Entry/weak Consistency**\n---\nIn weak consistency, it only requires that data that enters into critical section is in the same order. Before giving ownership to another process, the data went into the critical section must be brought up to date.","source":"_posts/Types_of_Consistency.md","raw":"---\ntitle: Type of consistency\ndate: 2016-05-16 14:33:00\ncategory: DS_Notes\ntags: Distributed_System\n---\nPerformance and consistency are always a pair of tradeoff.\n\nToday we discuss different kinds of consistency.\n<!--more-->\n\n**Strict Consistency**\n---\nIf process updates at T1, and then updates at T2, when read data between T1 and T2, following the strict consistency rule, the user would read data at T1.\n\nStrict consistency is not desired and not often used, except in micro-processors.\n\n**Sequential Consistency**\n---\nSequential consistency is relatively simple, all the processors agree on one sequential order. It is often used in distributed shared memory and distributed transactions. \n\nThis rule requires that the write operation to be seen by all the processors immediately.\n\n**Causal Consistency**\n---\nCausal consistency requires write operations in \"->\" order. Yet concurrent operations could be seen in different order in different processors (different from sequential consistency).\n\nThis rule could be **implemented** with vector clock to order updates.\n\n**Eventual Consistency**\n---\nIn this situation, read is assumed to be more than write. Data that is received slightly out of date is acceptable.\n\nThe model is described as client-centric model, which means that if the eventual results (writes) are propagated, then the rule is met.\n\nIn one sentence, **In the absence of updates, all writes will propagate eventually**.\n\n**Implementation** is quite simple: Give data items a lifetime, after which replica must read the item again\n\n**Entry/weak Consistency**\n---\nIn weak consistency, it only requires that data that enters into critical section is in the same order. Before giving ownership to another process, the data went into the critical section must be brought up to date.","slug":"Types_of_Consistency","published":1,"updated":"2016-05-16T21:34:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdsg0014sss22c5qroxb","content":"<p>Performance and consistency are always a pair of tradeoff.</p>\n<p>Today we discuss different kinds of consistency.<br><a id=\"more\"></a></p>\n<h2 id=\"Strict-Consistency\"><a href=\"#Strict-Consistency\" class=\"headerlink\" title=\"Strict Consistency\"></a><strong>Strict Consistency</strong></h2><p>If process updates at T1, and then updates at T2, when read data between T1 and T2, following the strict consistency rule, the user would read data at T1.</p>\n<p>Strict consistency is not desired and not often used, except in micro-processors.</p>\n<h2 id=\"Sequential-Consistency\"><a href=\"#Sequential-Consistency\" class=\"headerlink\" title=\"Sequential Consistency\"></a><strong>Sequential Consistency</strong></h2><p>Sequential consistency is relatively simple, all the processors agree on one sequential order. It is often used in distributed shared memory and distributed transactions. </p>\n<p>This rule requires that the write operation to be seen by all the processors immediately.</p>\n<h2 id=\"Causal-Consistency\"><a href=\"#Causal-Consistency\" class=\"headerlink\" title=\"Causal Consistency\"></a><strong>Causal Consistency</strong></h2><p>Causal consistency requires write operations in “-&gt;” order. Yet concurrent operations could be seen in different order in different processors (different from sequential consistency).</p>\n<p>This rule could be <strong>implemented</strong> with vector clock to order updates.</p>\n<h2 id=\"Eventual-Consistency\"><a href=\"#Eventual-Consistency\" class=\"headerlink\" title=\"Eventual Consistency\"></a><strong>Eventual Consistency</strong></h2><p>In this situation, read is assumed to be more than write. Data that is received slightly out of date is acceptable.</p>\n<p>The model is described as client-centric model, which means that if the eventual results (writes) are propagated, then the rule is met.</p>\n<p>In one sentence, <strong>In the absence of updates, all writes will propagate eventually</strong>.</p>\n<p><strong>Implementation</strong> is quite simple: Give data items a lifetime, after which replica must read the item again</p>\n<h2 id=\"Entry-weak-Consistency\"><a href=\"#Entry-weak-Consistency\" class=\"headerlink\" title=\"Entry/weak Consistency\"></a><strong>Entry/weak Consistency</strong></h2><p>In weak consistency, it only requires that data that enters into critical section is in the same order. Before giving ownership to another process, the data went into the critical section must be brought up to date.</p>\n","excerpt":"<p>Performance and consistency are always a pair of tradeoff.</p>\n<p>Today we discuss different kinds of consistency.<br>","more":"</p>\n<h2 id=\"Strict-Consistency\"><a href=\"#Strict-Consistency\" class=\"headerlink\" title=\"Strict Consistency\"></a><strong>Strict Consistency</strong></h2><p>If process updates at T1, and then updates at T2, when read data between T1 and T2, following the strict consistency rule, the user would read data at T1.</p>\n<p>Strict consistency is not desired and not often used, except in micro-processors.</p>\n<h2 id=\"Sequential-Consistency\"><a href=\"#Sequential-Consistency\" class=\"headerlink\" title=\"Sequential Consistency\"></a><strong>Sequential Consistency</strong></h2><p>Sequential consistency is relatively simple, all the processors agree on one sequential order. It is often used in distributed shared memory and distributed transactions. </p>\n<p>This rule requires that the write operation to be seen by all the processors immediately.</p>\n<h2 id=\"Causal-Consistency\"><a href=\"#Causal-Consistency\" class=\"headerlink\" title=\"Causal Consistency\"></a><strong>Causal Consistency</strong></h2><p>Causal consistency requires write operations in “-&gt;” order. Yet concurrent operations could be seen in different order in different processors (different from sequential consistency).</p>\n<p>This rule could be <strong>implemented</strong> with vector clock to order updates.</p>\n<h2 id=\"Eventual-Consistency\"><a href=\"#Eventual-Consistency\" class=\"headerlink\" title=\"Eventual Consistency\"></a><strong>Eventual Consistency</strong></h2><p>In this situation, read is assumed to be more than write. Data that is received slightly out of date is acceptable.</p>\n<p>The model is described as client-centric model, which means that if the eventual results (writes) are propagated, then the rule is met.</p>\n<p>In one sentence, <strong>In the absence of updates, all writes will propagate eventually</strong>.</p>\n<p><strong>Implementation</strong> is quite simple: Give data items a lifetime, after which replica must read the item again</p>\n<h2 id=\"Entry-weak-Consistency\"><a href=\"#Entry-weak-Consistency\" class=\"headerlink\" title=\"Entry/weak Consistency\"></a><strong>Entry/weak Consistency</strong></h2><p>In weak consistency, it only requires that data that enters into critical section is in the same order. Before giving ownership to another process, the data went into the critical section must be brought up to date.</p>"},{"title":"随笔一则","date":"2016-08-01T17:28:00.000Z","description":"Everything is just like a dream.","_content":"\n睡醒再写=。=\n\n\n\n反正也没人看hhh\n","source":"_posts/随笔一则.md","raw":"---\ntitle: 随笔一则\ndate: 2016-08-02 01:28:00\ncategory: Life\ntags: All_about_life\ndescription: Everything is just like a dream.\n---\n\n睡醒再写=。=\n\n\n\n反正也没人看hhh\n","slug":"随笔一则","published":1,"updated":"2016-08-02T08:34:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixt0kdsj0019sss2dld90xji","content":"<p>睡醒再写=。=</p>\n<p>反正也没人看hhh</p>\n","excerpt":"","more":"<p>睡醒再写=。=</p>\n<p>反正也没人看hhh</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cixt0kdrg0009sss2w61xwkks","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdrw000gsss27tybha8e"},{"post_id":"cixt0kdqx0001sss2r1dvuepp","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdry000lsss2j9p1mzqa"},{"post_id":"cixt0kdro000bsss2f37i1ob3","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kds1000osss29chx9ljv"},{"post_id":"cixt0kdrt000esss2zg8qxs8g","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kds3000rsss2nf1tqi02"},{"post_id":"cixt0kdr30003sss2m9g7tvv6","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kds5000usss27vyoe6rw"},{"post_id":"cixt0kdrx000isss2bkbg0a3j","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kds9000xsss2vcg15zlm"},{"post_id":"cixt0kdrz000msss2efwwz2xo","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdsd0010sss2y63u4ooq"},{"post_id":"cixt0kdrc0007sss27dy3uj5a","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdsf0013sss2mu4yjqbr"},{"post_id":"cixt0kds1000psss267ul3ztw","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdsj0018sss2ue0j0t28"},{"post_id":"cixt0kds3000ssss21qm37wp2","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdsl001bsss2xvtn0ijy"},{"post_id":"cixt0kds6000vsss2r72z3lir","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdsm001esss2c6glzww4"},{"post_id":"cixt0kds9000ysss2jxr6do76","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdsm001hsss2p7q18zrr"},{"post_id":"cixt0kdsg0014sss22c5qroxb","category_id":"cixt0kdr90005sss2nipql4eu","_id":"cixt0kdsn001jsss2shgs6e9u"},{"post_id":"cixt0kdse0011sss200fht9z6","category_id":"cixt0kdsi0017sss2covl7g3r","_id":"cixt0kdsn001lsss2hf3by4rv"},{"post_id":"cixt0kdsj0019sss2dld90xji","category_id":"cixt0kdsm001fsss2mhofcic9","_id":"cixt0kdsp001msss2qlik3mot"}],"PostTag":[{"post_id":"cixt0kdrg0009sss2w61xwkks","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdrt000dsss2dwft74eb"},{"post_id":"cixt0kdqx0001sss2r1dvuepp","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdrv000fsss2gb80jv08"},{"post_id":"cixt0kdro000bsss2f37i1ob3","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdry000ksss29lccft1y"},{"post_id":"cixt0kdrt000esss2zg8qxs8g","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kds1000nsss2uadsm1hr"},{"post_id":"cixt0kdr30003sss2m9g7tvv6","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kds3000qsss2yrvcyzb6"},{"post_id":"cixt0kdrx000isss2bkbg0a3j","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kds5000tsss2kz8v0ik2"},{"post_id":"cixt0kdrz000msss2efwwz2xo","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kds8000wsss2xx8ptayh"},{"post_id":"cixt0kdrc0007sss27dy3uj5a","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdsd000zsss2ihpdbzx4"},{"post_id":"cixt0kds1000psss267ul3ztw","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdsf0012sss2ut2wjw1g"},{"post_id":"cixt0kds3000ssss21qm37wp2","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdsi0016sss2qma2qist"},{"post_id":"cixt0kds6000vsss2r72z3lir","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdsl001asss2p7xo4q9r"},{"post_id":"cixt0kds9000ysss2jxr6do76","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdsl001csss2bfrwgvb2"},{"post_id":"cixt0kdsg0014sss22c5qroxb","tag_id":"cixt0kdr60004sss2kumjszgl","_id":"cixt0kdsm001gsss2421fjv9i"},{"post_id":"cixt0kdse0011sss200fht9z6","tag_id":"cixt0kdsi0015sss25wiplvqa","_id":"cixt0kdsn001isss2e34n54sn"},{"post_id":"cixt0kdsj0019sss2dld90xji","tag_id":"cixt0kdsl001dsss2wcs0gjbj","_id":"cixt0kdsn001ksss2o1qr2q2s"}],"Tag":[{"name":"Distributed_System","_id":"cixt0kdr60004sss2kumjszgl"},{"name":"LeetCode","_id":"cixt0kdsi0015sss25wiplvqa"},{"name":"All_about_life","_id":"cixt0kdsl001dsss2wcs0gjbj"}]}}